// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/mapping.js
// tmpl/js/request_logger.js
// tmpl/js/util.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xcf\x6e\xa3\x30\x10\x87\xcf\xeb\xa7\xb0\x94\xeb\x82\x94\x28\xd2\xae\x8c\xb4\x52\xb6\x6d\x5e\xa3\xf2\x9f\x01\x2c\x26\x1e\x34\x38\x4d\xa2\x28\xef\xde\x81\xd0\xa6\x87\x52\x2e\xc0\xef\x1b\x7f\xe3\x19\x63\x8a\x13\xb8\x2e\xe6\x62\xf0\x4c\x88\xce\xb2\xbe\x2a\x2d\xcf\x29\x86\xdc\x1a\xbd\xde\xf4\xe7\x4a\xdd\xd4\x37\x85\x45\x66\xeb\xbb\xb9\xdc\xc9\x67\xc3\x74\x4c\xa1\xf0\x84\xc4\x46\xaf\x9e\x76\x2f\xdb\xfd\xae\xba\x63\xe2\x00\x5c\x20\xd4\x59\x9c\xfd\x59\x0f\x84\x31\xe8\x95\xf7\x7e\xd1\xde\x1e\x0f\x6e\xd9\xbe\xdd\xfc\x75\xde\xfe\x78\xd8\xb4\xf4\x06\xbc\xac\x58\x3f\xff\xd9\xfe\xdf\x8f\x0a\xa5\xca\x01\x10\x7c\x86\xf0\xca\x74\xd2\x57\x5d\x53\xca\xa2\x8d\x4d\x2b\x17\x76\x84\xa1\xba\x49\x4d\xe6\x98\x1a\xa1\xb3\xa1\x61\x80\x54\x69\x21\x49\xda\x8d\xad\x3e\x48\xb0\xdc\x11\xdb\xd4\xc0\x84\x1d\x11\x82\x4d\x0f\xee\xf0\x08\xf3\x41\xc4\x47\x7c\xb0\x0d\xa4\x6c\x27\xd2\xc1\xe5\x01\x18\xc2\x18\xaa\x6c\x1d\x82\x2e\x25\x45\xdb\x0f\x50\x46\x71\xaa\x5f\x21\x0e\x3d\xda\x8b\x99\x68\x21\x03\x4c\x33\x95\xf7\xdf\xfb\x12\xfe\xe9\xec\x28\x5c\xc6\x37\xcf\xb3\x8e\x85\xe6\x93\x86\xdf\xea\x4b\x3e\x25\xcb\x9b\xab\xeb\x5a\x5a\xbc\x07\x00\x00\xff\xff\xc8\xe4\x9f\xe6\x3d\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 573, mode: os.FileMode(420), modTime: time.Unix(1485530015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x1a\xed\x52\xdb\xca\xf5\x3f\x4f\xb1\x57\x69\x3b\x30\xf7\x4a\xc2\x18\x02\x01\xdb\x33\x04\x7c\x9b\x50\x0c\x0e\x38\xd0\x7b\xff\x64\xd6\xd6\xda\x5a\xb3\xd2\x0a\xed\xca\x1f\xc9\x30\xd3\x27\xe8\x7b\xf4\x47\x5f\xa2\x7d\x93\x3e\x49\xcf\xae\x64\x59\x96\x2d\x5b\xc0\x24\x2d\x33\xd7\xb1\x56\xe7\x73\xcf\xf7\xf1\xad\xfd\x74\x7e\x7d\xd6\xf9\xad\xdd\x44\x1f\x3a\xad\xcb\xc6\x56\xcd\x95\x1e\x6b\x6c\xc1\xbf\x04\x3b\x8d\x2d\x04\x7f\x35\x8f\x48\x8c\x5c\x29\x03\x93\x3c\x46\x74\x54\x37\xce\xb8\x2f\x89\x2f\xcd\xce\x34\x20\x06\xea\xc5\x4f\x75\x43\x92\x89\xb4\x15\xfe\x09\xea\xb9\x38\x14\x44\xd6\x3f\x77\x7e\x35\x8f\x0c\x64\x27\x94\x24\x95\x8c\x34\x5a\x2d\xde\x7b\x40\x40\x44\x70\x46\x6a\x76\x7c\x18\x03\x88\x5e\x48\x03\x89\x44\xd8\xab\x1b\x8a\xa3\x38\xb6\xed\x1e\x77\x88\x35\x7c\x8c\x48\x38\xb5\x7a\xdc\xb3\xe3\xaf\xe6\x9e\x55\xb1\xf6\x2d\x8f\xfa\xd6\x50\x18\x8d\x9a\x1d\xa3\xae\xa3\xe3\xf8\x43\x61\xf5\x18\x8f\x9c\x3e\xc3\x21\xd1\xc4\xf0\x10\x4f\x6c\x46\xbb\xc2\x76\xb1\xef\x30\xd2\x05\xb9\x81\xa0\xbd\x67\xed\x5a\xbb\x8b\x67\x59\x26\x31\x17\x46\xfd\x07\x14\x12\x56\x37\x84\x9c\x32\x22\x5c\x42\xa4\x81\xdc\x90\xf4\xe7\x5c\x3d\x3c\x01\xc6\x56\x97\x73\x29\x64\x88\x03\xf5\xa0\x18\xa7\x07\x76\xd5\xaa\x5a\x6f\xed\x9e\x10\xf3\x33\xad\x16\x9c\x18\x88\xc2\xdd\x0e\x42\x2a\xa7\xc0\xc3\xc5\xd5\xa3\x7d\xb3\xf2\x78\xe4\x75\x2e\xae\x4f\x6f\x27\x47\xc3\xca\x69\xf4\x33\x3e\xb8\x3f\xbf\xf3\xdb\x74\x8f\x3d\xfc\xda\x1f\x8f\x9b\xa7\xf8\xc8\x3d\x3f\x77\x86\xbf\xb3\xe0\x92\x0c\x26\xee\xf0\xae\xd5\xac\xf4\x07\xc3\xfb\xf6\x9f\xbd\x87\xaf\xe2\x10\x0c\x16\x72\x21\x78\x48\x07\xd4\xaf\x1b\xd8\xe7\xfe\xd4\xe3\x11\xa8\xf7\x9d\x95\x32\xa5\x4b\x3c\xb2\x4e\xb5\xfe\xe5\xfd\xde\xd5\x6e\x85\xb5\x1e\x87\xf8\xe1\xfd\xc3\xa4\xca\xec\xd6\xbb\x26\x76\xa3\x71\x70\xdb\x27\x57\xa3\xbb\xb7\xd5\x8b\x03\xf2\xd5\xaf\x46\xbf\x7f\xc5\x41\x67\x37\x3a\x6c\xfe\x26\xfe\xda\x1a\x7e\xba\xfb\x79\xb7\xe9\x1f\x84\x9b\x54\x5b\xe5\x15\x65\x55\x19\xe6\xcd\x33\x5c\xa9\xc2\xae\x77\xdb\xbd\x38\x6f\x7e\xa0\x98\xf5\xbd\xe8\xfd\xfb\x4f\xed\xb7\xa7\xfb\x9f\xc2\x20\x7c\x3c\xb8\xbe\xeb\xdf\x57\x0f\xdb\x37\x37\xd5\xe1\x41\xf3\xf2\x71\x22\x44\x65\x7a\xf7\x78\x2d\x7d\x12\xf8\x1f\xee\xda\xef\xf0\xc5\xe1\xe4\xb6\x58\x85\x95\xce\xb7\x68\x96\x0d\x1e\x9e\xca\x5f\x35\x1d\x90\x8f\x0f\xec\x8a\x55\xdd\xb7\xde\xe5\xcc\x14\xbf\x9b\xdb\x69\xc9\x17\x24\x84\x7d\x12\xed\x0a\xe0\xe5\x21\x57\x28\xd0\xb0\x40\x9e\x55\x41\x98\xf0\xcd\x08\x75\x81\x47\xf8\x56\x9f\x1a\xb1\x38\x40\x2e\x92\x94\xad\x49\x14\x1b\xb0\x43\x48\x7c\x44\xc8\x2f\x20\xc7\x80\x84\x2f\xa7\xe3\xe1\x20\xa0\xfe\x60\x15\x81\xd5\x61\x97\xbb\xea\xc4\xde\xca\x5e\x1a\xca\xca\xdc\xbf\xce\xd2\x3e\xf6\x00\x7e\x44\xc9\x38\xe0\xa1\xcc\xe4\xe6\x31\x75\xa4\x5b\x77\xc8\x88\xf6\x88\xa9\x1f\x7e\x01\xef\xa5\x12\xee\xd6\x14\x3d\xcc\x48\xbd\x62\x94\x51\x25\x86\x51\x7f\x7f\xd8\x46\x0e\xef\x45\x1e\x90\x47\x3b\x56\x08\xe5\x62\xba\xdd\x8f\xfc\x9e\xa4\xdc\xdf\xde\x41\xdf\x50\x0a\xa9\xfe\x16\x1e\x46\x38\x44\xc9\x95\x5e\xea\x1b\x45\x75\xe4\x93\x31\xba\xc9\x9e\x6d\xef\x9c\x2c\x63\x8d\x45\x02\x7a\x4f\xba\xb7\x50\x45\x88\xdc\x36\xc6\xca\xd3\x0c\xf4\x33\x62\xbc\x87\x15\x77\xcb\xe5\x42\xc2\xb3\x61\x93\x9e\xcb\x8d\x9d\x93\x05\x32\x63\x61\x71\xdf\x23\x42\xe0\x01\x01\x62\xa9\xc8\x64\x04\x9a\x2c\xc9\x3d\x63\x3c\x47\xb8\xb8\xbd\xbe\xb2\x02\x55\xde\x62\x14\xcb\xc1\x12\xe7\x78\xa8\xbf\x05\x05\x2d\xf0\x9c\xa6\x2f\xc3\xe9\x76\x42\x28\x87\xf0\x74\xb2\xb5\xb5\xa4\x6c\xe2\x2d\x89\xc6\xad\xf8\x69\xdb\x78\xf3\xa6\x75\x7d\xf6\x97\x2f\xb7\xcd\x9b\xbb\xe6\xcd\x97\xe6\xd5\x79\xfb\xfa\xe3\x55\xe7\xcd\x9b\xbc\xa2\x33\x67\xeb\x53\xc6\x2e\xa9\x90\xdb\x3b\xe9\xeb\x27\x00\x8d\x8d\x9d\x3a\x61\xcd\x8e\x2b\xfe\x56\xad\xcb\x9d\x69\xe2\x0a\x6e\x98\x7c\x71\xe8\x08\xf5\x18\x16\x02\x9c\x0f\x5c\x0a\x53\x9f\x84\x66\x9f\x45\xd4\xc9\x78\x44\xcd\xad\xe4\x6b\x3b\x9c\xcc\x5f\x67\x88\x84\x7c\x9c\x41\xd4\x6f\xb1\xa0\x0e\x99\x33\x61\xa6\xe7\x98\x7b\x28\xc0\x8e\x09\xb9\xd0\x95\xe6\x6e\x0e\x41\x23\x45\x6c\x86\xe1\xe3\x11\x78\xff\xc8\x0c\x40\x5b\xa1\xbf\x09\x89\xc1\x41\x9c\x15\x68\x1a\x95\xd1\x19\x2a\x06\x07\x18\x11\x88\x48\x8c\x94\x2d\x4d\x09\x26\x63\xca\xf7\x71\x77\x16\x71\x6f\x12\x6b\x1a\x8d\xc4\x47\x45\xcd\xc6\x05\x84\x21\xb7\x15\xb2\x5c\xcb\x23\x31\x98\xd1\x48\x4c\xfd\x72\x16\x31\xc1\x21\x84\x6d\x6c\xde\xe3\x13\x63\x91\xad\xc7\x1d\xcc\x66\x67\x38\x1c\x40\xab\x06\xfc\xa7\x2d\x7d\xdc\x38\xed\xf2\x48\x3e\x93\x7b\xcd\x8e\x58\xce\xa2\xb6\x36\x69\xee\x70\xc1\x93\xb4\x91\x2b\xca\xb2\xcb\xf4\x32\x80\x70\x49\x66\x92\xc9\x8a\xac\xf9\x93\x69\x76\x70\x17\x55\x4c\xb3\x00\x40\x91\xa3\x0e\x78\x5e\x62\xc8\x2c\xed\x00\xfb\x04\xf5\x31\xb8\x1f\xf5\xd1\xcc\x1b\x56\x92\x99\xf1\xa2\x7e\x97\x4f\x90\xe4\x9c\x41\x73\x58\xc4\x33\xaf\xc6\xb2\xd3\xaf\x83\x56\xb7\x33\x11\x66\x65\x6f\x03\x4e\x1e\x2f\x88\x18\x8b\x43\xa6\x04\xa2\x46\xc6\x33\xd4\xae\xf4\x11\xfc\x67\x3a\xa4\x8f\x23\x26\xf5\xf7\x09\x54\x1d\xdd\xa1\xd7\x8d\x1b\xd2\x0f\xa1\x30\x19\xfa\x1e\xe1\xdd\x19\x23\x38\x84\xfc\x56\x82\x8f\x06\x5d\xaf\x7a\x91\xbb\x2d\x02\x81\xa2\x1b\xae\xb0\x04\x08\x18\xd0\x56\xd7\xbb\xc6\x6e\x1a\x6e\x95\x35\x90\x08\x70\x8f\x84\x07\xaa\x80\xaf\xe5\xb4\xe9\xb5\x12\x02\x3c\x62\xad\xf3\x28\x98\x17\xb9\x9a\xf2\x68\x86\xf4\x67\x6a\xcd\x79\x41\x32\xb2\x91\x00\xcf\x6d\x05\xb7\xc9\x35\x41\x96\x59\x11\x64\x50\x4d\x4a\x5d\x5e\x86\x8d\xa9\x72\x4d\x36\xea\x18\x31\xc1\x9b\x02\xa8\x14\xeb\xc3\x2d\x25\xa8\x71\x16\x48\xea\x93\x45\x9a\x28\xa6\xec\xf2\x11\x51\x3d\x86\x76\x58\x33\x2d\x59\x48\x07\x87\xc3\xc7\x3e\xf4\x64\xaa\x81\x9a\x49\xc2\xf0\x14\x52\xde\x31\xea\xd3\x09\x71\xe2\x32\x3a\xe6\xa1\x63\x8e\xa1\x01\x3d\x46\x5d\xe8\x6e\x1e\x4c\x75\x70\x52\x36\xa6\xa4\xaa\xa6\x33\xc9\x5c\xea\x38\x44\x87\x52\x39\xec\x98\x42\x58\x1e\x38\x61\x99\x75\x56\xe1\x99\x55\xf0\x51\x68\xa1\xb9\x3f\x68\x9c\x63\x09\xd5\x38\x79\x78\x1e\x59\x5b\xba\xaf\x15\xa4\x32\x17\xe4\x0c\x86\xf9\xff\x0b\x41\x5a\x44\xba\xdc\xf9\xdf\x89\x72\x38\x17\xa5\x8d\xa5\xfb\x23\x04\x01\xe8\x92\x3e\xa5\xe8\xa6\xfb\x9f\x8d\xc0\x72\xde\x31\x96\x20\x5c\x0e\x18\x00\x55\x60\xbe\x2a\xd7\x97\xc9\xc0\x71\x76\x8d\x13\x65\xc9\xdc\x3a\x26\x8c\x21\xf5\x61\x0a\xa4\xc6\xa3\x59\xb1\xad\x11\xaf\x71\x89\x45\x9a\x68\x51\x14\x40\xce\x23\xce\x31\x8c\x54\xc0\x40\x67\x2e\xa0\x20\xbf\x24\xe7\x46\xe3\x1e\xc3\x00\x06\x1d\xba\x65\x81\xf9\x01\x04\x4a\x0a\xd0\x78\x89\x3e\xeb\x5e\x81\x9a\x48\xf5\x46\x7b\x1b\x7b\xa3\x59\x03\xba\xb2\x37\xda\xd0\x11\x6d\xac\x65\x39\x26\xaf\xaa\x07\x99\x5a\x30\x23\x57\x5c\x0b\x20\xb0\x68\x40\x9c\x6c\x65\x28\x55\x6e\x9e\x13\x01\xcf\xc8\xd5\x2a\x15\xc4\xd3\xb8\x51\x39\xf8\xa3\xd1\xf8\x1c\xd2\x67\x86\xf1\x9c\x40\x75\x17\x08\x9c\x93\xb8\xc9\x87\x21\xf6\xc5\x84\x94\x20\xb3\x8c\xf8\x1a\x59\xe2\x54\xf6\x0a\x21\x6e\x88\x80\x5e\xe5\xd9\x24\x1a\xdf\x13\xa3\x5c\xde\x4c\x73\x66\x09\xd7\x2a\x97\x03\xcb\xb0\xdc\x4c\x69\x63\x26\x7d\x41\x5a\x59\x71\x9e\x3b\xca\x3c\x26\x5f\xe3\xef\x2a\x19\xe9\x29\x13\xe9\x21\x73\x96\x31\xb2\xf9\x55\xcf\xa6\x71\xca\x89\x23\x3c\x19\x4b\x51\xc8\x55\xc3\x16\xaf\x03\x8d\xd5\x7b\x05\x8d\x9b\x6c\x0c\x51\xfc\x20\xbc\xfc\xa6\x61\x09\xbe\x78\xb6\x5c\x86\x55\x36\x2e\x4c\x20\xb5\x6e\x24\x25\xf7\x93\xdd\x59\xfc\x90\xe6\xa4\x1e\xe3\x82\x24\x33\xb7\x43\x85\x47\x53\xa2\x46\xe3\x4f\x92\x42\x73\x7d\x52\xb3\x63\x9c\x02\xea\xee\xfe\xa2\x2c\x7a\x2e\x33\x92\x9d\xcb\x3d\xe9\x66\xf6\x2e\xfb\xab\x26\xf4\x95\xc6\x5c\x56\x51\xf9\x54\x91\x82\x41\xa3\xe5\x29\x6e\x54\x20\x28\x69\x1f\x3a\x9d\x36\x52\xcf\x6a\x4d\x05\x89\x98\xd1\x78\x03\x87\xfa\x3c\x84\xda\x28\xa4\x3e\xf7\x1d\xb0\x26\xd4\xc3\x20\xe4\x92\xc3\xd5\xe8\xd5\x46\x50\xc8\xe0\x92\xf6\x88\xdf\x23\xa0\x4c\x30\xd5\xa5\x15\xfd\xeb\x1f\xff\xf9\xdb\xdf\xd1\xde\x6e\xe5\xf0\x17\x74\x01\x5d\x38\x45\x2d\x1c\xca\x7f\xff\xd3\x47\xdb\xe9\xb2\x43\xad\x9c\x8f\x6d\x7b\xa8\x5e\x5b\x94\xc3\xd0\x9a\xac\x35\xbe\x74\x19\xf6\x1f\x8c\x46\x0e\x40\xcd\x9b\x3b\xeb\xc4\xb8\x21\x30\xb3\x0a\xa8\x1b\x91\x0f\x06\x47\xad\x8f\x1d\x98\x7b\x40\x32\x41\x7e\x41\x82\x10\xb4\xc0\x59\xad\x20\x07\x54\xba\x51\x37\xfe\x89\xca\x03\xf9\xa8\x7f\xb4\x67\x7b\xea\x76\xec\x2e\xe3\x5d\xdb\x83\x3b\x20\xa1\x7d\xf9\xf1\xac\x79\x75\xdb\xb4\x3c\x67\x59\xc6\xe4\xdd\x9a\xd5\x4b\xd0\xd0\x77\xeb\x10\x18\x68\x98\xb0\x94\xc5\xa1\xbc\x81\xd7\x90\xe3\xe7\x48\xb4\xfa\x7a\xd6\xe3\xac\x94\xaa\xb4\x53\xf5\x39\x97\x2f\x8b\x9b\xdc\x56\xa2\x20\x82\xce\x54\x74\x15\xc7\xcf\xeb\x32\x56\xa7\xd9\x6a\x5f\x9e\x76\x9a\xb7\x28\x4d\x58\xc9\x96\x3c\x3b\x8e\x12\xb5\xe0\x5d\xd8\xd9\x4f\xcc\xf9\x2f\x88\xa6\x24\x5e\xc0\xa0\xf1\xcb\x6e\xbb\xa0\x73\x98\xa7\x07\xda\x7b\xd0\x6d\xcb\xb7\x6f\xb3\xdf\x1b\x60\x56\xe0\xe1\xd3\x53\x6e\x51\x97\x4e\xd4\xb1\x13\x98\x73\x78\x3f\xf2\x00\x3a\xa7\xa6\x74\x96\xe7\xc2\x39\x8a\x6a\x45\x9f\x9e\xa0\x48\x38\x9b\xd0\xd4\xf0\xd4\x6d\x64\x85\x73\x34\x66\x37\x7f\xad\xa5\x48\xcd\xe9\x78\xba\xef\x28\x27\xc3\x61\x16\x31\x80\x66\x23\x8f\xb6\x58\xab\xd5\xf5\x2e\xec\x20\x0a\x6e\x6c\xc6\x45\x40\xcc\xf7\xa0\xa1\xe7\xe3\x74\x3f\x00\x7e\x06\x56\x9b\x1e\x23\x9f\xfb\xf9\xb6\x54\xcb\xc7\x99\x6a\xdd\xeb\xc6\x7e\x51\xf9\x48\x08\x05\xd8\x71\x20\xf3\x1d\xa3\xdd\x60\x82\x2a\x07\xd9\x8f\xa2\xa8\x70\xab\xd0\xdc\x69\x89\x21\xa3\x57\x8b\x81\xe2\xf9\x22\xd1\x81\xe1\x2e\x61\x48\x7f\x9a\x41\x48\x21\x86\xa7\xe9\xd6\x3a\x1d\x33\x0a\xa9\xad\x9f\x98\x82\x30\xdd\xd0\xc3\x57\x13\x62\x80\x33\xa6\x1b\xef\x46\x4d\xb9\x03\x18\x67\x76\xb3\x4f\xca\x32\xfa\x0c\x92\x56\x58\xd0\x7e\xac\x6b\x3d\xd6\xe9\xb5\x1c\x21\xaa\x71\x54\xb3\x03\xf9\x31\x2a\xc6\xbc\xbe\xab\x8e\xb3\x74\xd7\xb8\xe4\x83\x1f\xa2\x14\xb4\x4c\xcf\x51\xa8\x5c\x8a\x5d\x1d\x9b\x99\xdf\x70\x97\xb2\xe9\x6c\xa0\x2b\x9f\x4d\x53\xfa\xf9\x36\x1d\xe2\x33\x4e\x59\x9f\x6f\x3e\xc6\x99\x6a\x65\x8e\x01\x00\x67\x3e\x43\x15\x24\xa2\x75\xce\x18\x67\xb0\xb9\x2f\xa6\xee\x69\xcd\x73\x5b\x62\xc0\xd5\xec\x53\xf8\x38\xa5\x3d\x5f\x02\x21\xb1\x8c\xc4\xa2\x04\xb1\x8f\x5a\xf1\xab\xb3\x24\x59\xaf\x11\x63\xd3\xef\x00\xfa\x1f\xf5\xd3\xb2\x99\xee\x09\x74\x59\x8a\x42\x5a\x37\x92\x3b\x36\x1a\x77\x00\xa0\x3a\x85\x57\xf0\x20\x0e\x95\x6b\x79\x34\x01\x60\x99\xc7\x6a\xf7\x02\xab\xeb\x11\x49\xfd\xc0\xa9\xfe\xd7\xa6\xff\x06\x00\x00\xff\xff\xcb\x7f\xa3\x36\xf1\x24\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 9457, mode: os.FileMode(420), modTime: time.Unix(1493201463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsMappingJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x6d\x8b\xdb\x46\x10\xfe\x9e\x5f\xb1\x6c\x0f\x56\x26\xb6\x14\x28\xa5\xe0\x7b\xf9\x90\x6b\x21\x94\xa6\x2d\x5c\xfa\xe9\x7a\x84\xb5\x34\x67\x6d\xb2\xd6\xaa\xbb\xa3\xbb\x13\xc5\xff\xbd\x33\xb2\xe4\xc8\x96\xec\x73\xc0\x03\x06\xed\xce\xcc\x33\x2f\xcf\xcc\xfa\xb1\x2a\x52\x34\xae\x10\x1f\x75\x59\x9a\x62\x19\x65\x6e\xa5\x4d\x31\x11\xff\xbd\x79\x23\x48\x30\x37\x21\xde\xdc\x89\x6b\xb1\xf9\x68\x14\x49\x92\xba\x55\x69\x2c\x90\x09\xfd\x60\x55\x5a\x8d\xd0\xa8\x9e\xb4\x17\xab\x0d\xdc\xe7\xe0\x2a\x9f\x02\xb9\x5e\x44\xf2\x87\xf6\x72\x06\x05\xfa\x5a\x4e\xe2\x1c\x57\x36\x9a\x5c\x0e\x9c\x3a\x34\x72\xfb\xa0\x8b\xcc\xc2\x42\xfb\x10\xb7\xf1\xa2\x5d\x68\x72\xdf\xfa\x3f\x1a\x6b\x7f\x37\x01\xc9\xaf\xab\x2b\xe2\x4a\x44\x2b\x17\xf1\x12\xf0\xb7\xbb\x3f\xff\x88\x64\x8e\x58\xce\x93\x44\x8a\xb7\x6d\x51\xf4\x21\x13\x5d\x9a\xa4\x85\x97\xd3\x6f\x18\x99\x46\xdd\xc7\xe9\xe2\x19\x4a\x34\x50\xb0\xfb\x87\xcb\x1d\x5d\xbf\x56\xd4\x0b\xee\xd1\xc2\x65\x5c\x31\x15\x86\x75\x57\xf2\xb7\xb4\x40\xa7\x79\x13\xa5\x17\xf4\x2b\xd4\xd3\xae\x23\xfb\xc1\x59\x5a\xd5\xbd\x0a\xa8\xb1\x0a\x9f\x53\x67\x9d\x57\x0f\x94\x8e\xa0\x2a\x6f\xf9\xf4\xbe\xbe\x6b\x74\x5d\xcb\x62\x0f\xa1\x74\x45\x80\x78\xe3\x73\xeb\x32\xd8\xcb\x65\x07\x79\x05\x98\xbb\x6c\x1c\xf9\x63\xa3\xeb\x21\xff\x5b\x41\xc0\x78\xe3\x32\x02\xca\xfd\x62\xbe\x09\x65\x9f\xe6\x0e\x64\xc4\xeb\x70\x27\xe9\x12\x8a\x2c\x62\xc8\x3d\xbf\x75\xef\xbc\xee\xc6\x63\x7d\xd9\x9b\xe7\xfe\x9c\xb4\x9f\xad\xfa\x22\x52\xdb\x78\xcc\x87\x9a\xc4\x44\x85\x4a\xad\x49\xbf\xaa\xa9\x50\xf1\x02\x8b\xd9\x93\x81\xe7\x59\x6b\xa5\xa6\xe3\xa3\xc6\xe5\x56\xde\x34\x83\xcf\x31\x27\x31\xc3\x45\x92\xee\x64\x2f\xbf\xef\x99\xc8\x46\x45\xfe\x27\x0c\x66\xea\x0a\xa4\x25\xa3\xe8\x8c\x4d\x6c\x7b\xf2\x37\x8f\x75\x3b\x63\x45\x65\xed\x54\xc8\x7f\x50\x4e\x76\x5c\xdf\x3b\x87\x64\xab\xcb\x5f\x8c\xb6\x6e\x19\x87\xdc\x3d\x47\xc3\xc9\x43\x83\x16\xe6\x42\xb5\x4f\x86\xc8\xe0\xd1\x14\x86\x13\x52\xd3\xe1\x30\x41\x08\x7a\xc9\xe6\x57\xa5\x87\x1b\x45\x35\x84\xba\x40\xfd\xf2\xc1\x2c\x73\x4b\x3f\x8c\xda\x6c\x27\xa4\x52\x57\x49\x63\x75\x94\xd0\x2d\xb1\xa7\x53\x06\x99\xc1\x33\x51\xc6\x66\x34\x79\xa5\x33\x4d\x83\x4f\xe7\x6d\x8c\xf5\x0e\xe8\x4c\x9c\x0e\x29\x65\xcf\x0b\x84\x17\x6c\xca\x52\x57\xfc\xa9\x3d\x68\x61\xb2\x6b\xc9\x87\x59\x55\x12\x00\x74\xcd\x91\x22\x60\x6d\xe1\x5a\xae\x4c\x31\x7b\x36\x19\xe6\xf3\x9f\x7e\x7e\x57\xbe\x5c\xf2\x39\x07\xe6\x6b\xfe\xe3\x3b\xba\x90\x37\x57\x49\x07\x76\xa3\xf6\x5f\x34\xd6\xc4\x4f\xda\x6e\xb9\xdd\x51\x9f\x63\xe8\x98\xd1\x63\xe3\xd6\xa4\x30\xd4\x2f\x2a\x44\x7a\x01\xe7\xe2\x7e\x18\x82\xc5\xea\x05\x58\x0a\x73\xab\x8b\x14\xec\x48\x00\x16\xdd\x30\x35\xef\x71\xd6\xa4\x3e\xf6\x4a\x77\xb2\xb1\x88\x53\xeb\x02\xec\xbf\xff\x9d\xac\x07\xb7\xeb\xe9\x01\xc8\x2e\xcd\x3b\xfd\x04\x07\x92\x4c\x43\xb8\xb5\x3a\x50\xa9\x8a\x37\xa0\xf4\x66\xa5\x7d\x7d\xb6\x8a\x76\x47\x92\x97\x70\x64\x9a\x68\x17\x79\x08\x0e\xd4\x2b\x78\x13\xf4\x17\xfd\x32\x42\x77\x5f\xb0\x2e\x99\xf9\xbf\xfe\xfe\x74\x20\xfb\x4e\x2a\x4f\x3d\xd9\xae\xd4\x51\x53\x5e\x9a\x79\x57\xc0\x71\xd3\x50\xa5\x29\x70\x1f\xf7\x57\x74\xc0\xea\xf6\xdf\x84\xde\x95\xf5\x71\x50\xf0\xde\xf9\x11\x48\x6d\xc1\x63\x24\x7f\xdd\xa8\xe5\xdb\x91\x5d\x9f\x50\xa0\xfd\xc0\xaf\x44\x6b\xeb\xfc\xd4\x34\x52\x12\x37\xf4\x38\x6a\x8e\x9b\x7c\x09\xae\x90\xaf\xb7\x6a\xe3\xa9\xd8\x5a\x1d\x34\x5e\x9f\x3e\xd7\x0f\x27\x3e\xf0\x24\xeb\xff\x03\x00\x00\xff\xff\x3c\x1c\xde\x73\xa3\x0a\x00\x00")

func tmplJsMappingJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsMappingJs,
		"tmpl/js/mapping.js",
	)
}

func tmplJsMappingJs() (*asset, error) {
	bytes, err := tmplJsMappingJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/mapping.js", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1493201089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsRequest_loggerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xdd\x6a\xdb\x4c\x10\xbd\xf7\x53\x6c\x94\x80\x57\x9f\xfd\x29\x4e\xe9\x95\x42\xa1\x34\x75\x09\x25\x4e\x69\x9c\x52\x7a\x15\xd6\xd2\xc4\x16\x91\x76\xd5\xd5\xa8\x8d\x09\x7e\xf7\xce\xee\x6a\xad\x1f\x9c\x1f\x81\x8d\x59\x9d\x39\x7b\xe6\xcc\x78\xe6\xbe\x96\x09\x66\x4a\xb2\x1b\xf8\x5d\x43\x85\x57\x6a\xbd\x06\xcd\x43\xf6\x34\x62\xf4\x9c\x9e\x26\xaa\x28\xb3\x1c\x18\x6e\xe8\x03\x45\x99\x0b\x04\xfb\xea\x8f\xd0\xac\x52\xb5\x4e\x80\x7d\x60\x27\x3c\x38\xd6\x8e\xe1\x7f\x90\xa8\xb7\x41\x18\x6d\xb0\xc8\x79\x78\xbe\x07\xfb\x68\x82\x5f\x0a\x99\xe6\xb0\x12\xba\x8a\x1a\x7e\xee\xa8\x08\x6e\xf1\xb8\xc9\xaa\x48\xd6\x05\x61\x67\xee\x64\x2f\xb4\x2e\x53\x22\xb9\xcd\x90\x82\xbc\x4c\xf3\x9c\xf0\x54\x25\x75\x41\xb7\x87\x91\x40\xd4\x3c\x40\x83\x09\xa6\x2c\xb8\x9e\xff\x64\x37\xf3\xef\x3f\xe6\xcb\xdb\xa3\xa3\xa0\x91\x64\x9e\x0a\xf0\x36\x2b\x40\xd5\xc8\xf7\xfc\x86\xf4\x25\xb2\xc5\x42\x25\x0f\xec\x42\xc9\x4a\xd1\x41\x78\xce\x76\x53\xf6\x6e\x36\x9b\x35\xb4\xbb\x81\xdc\x35\x60\x63\xad\xb9\x89\x23\x7d\x55\x28\x8a\xb2\x2b\xdd\xb8\xa3\x5b\x10\x25\x2d\xe1\x2f\xfb\x4c\x69\xb6\xf8\xff\xce\xda\x3b\x7c\x8c\x31\x02\x5d\x40\x27\x3c\xa2\x2b\x6d\x6c\xc8\x26\x2c\x38\x0d\xd8\x64\x1f\x64\x1e\x3e\x80\x2e\x94\xc4\x8d\xc5\x9e\x1d\x0e\x18\xe0\xbf\xd4\x79\xfe\x0b\x84\x76\xf4\xec\x23\x7b\x05\x7f\x49\x85\xad\x1c\x38\x7e\x05\xba\xc8\x64\x8d\xf0\x46\xf0\x12\x12\x25\xd3\x8a\x77\x3c\xd1\x80\xb5\x96\x7b\x5b\x0e\x17\xc4\xf5\xcf\x95\xa8\x7c\x5d\xfa\x3e\xf7\x5b\x6a\x7c\x9c\x13\xf0\xce\xc5\xa4\xe3\x30\x42\x78\x44\xfe\x6c\x4d\x9f\xef\x01\xea\x17\x1b\x4a\x3d\x3d\x35\x02\xc5\xb0\xfe\x44\x80\x75\x45\x95\x34\x2f\x23\x0d\x55\x49\x1d\x06\x91\x3b\xbe\x50\x29\xf4\x4b\x5f\x00\x6e\x54\xda\xc2\xad\x9a\xc8\x9d\xf6\x91\xa5\xc0\xcd\x10\x67\xce\xce\x0f\xb5\x1f\x01\xab\xad\x44\xf1\x78\x99\xad\x37\x39\x7d\x90\x7f\x5d\x7e\xbb\x26\x19\x3a\x93\xeb\xec\x7e\xcb\xbb\x3c\x53\x56\xcb\x14\xee\x33\x09\xe9\x94\xbd\x0f\xc3\x21\xa5\xcb\xe1\xcd\x9c\x0e\xfe\x32\x69\xae\xd6\x6f\xe7\xab\xf3\x57\x24\x26\x2a\x57\x9a\xf8\x6c\x81\xe8\xe7\xa7\xed\xd2\xfa\xcd\x9d\xed\xe1\x68\xd8\x5a\x4f\xde\xa8\x3b\x2a\x64\xcc\x6c\x35\x9b\x93\x98\xed\x5d\xf1\xa9\xc4\xac\x4d\x4a\x93\xf2\xd8\xc8\xdf\x07\xdc\x99\x9e\x8a\x87\x03\xc2\x6a\x37\x1d\x15\xb6\xc0\x84\xca\x1f\x37\x1d\xd2\x9e\xba\x62\xc7\x4d\x2b\xb4\xe7\xa6\xb8\xb1\x2d\x7b\x97\x81\xb2\x8b\x9b\x7c\x77\xbd\x2e\xb5\xa3\x96\x74\xcd\xcd\xd8\x26\x2f\xda\x41\x38\x6c\x53\x3f\x94\x27\x93\xa1\x8b\xb6\xb7\xbd\x8f\xae\xd1\x3d\xb8\xe9\xf6\x7e\x84\x59\x0d\x04\xf7\x1b\x81\x37\x0c\x1d\x54\x77\xa1\xa0\x58\x99\x05\xb4\x52\xa9\x59\x2b\xa5\x86\x12\x64\xca\x0d\x47\x27\xa0\xb7\x16\x86\xc7\xc3\x7f\x7b\x6b\x72\xb3\x6f\xc8\x12\xb2\xa3\x3b\xf5\x35\x88\x74\xdb\xdf\x0a\x23\x2f\x6c\x85\xf2\x22\xa7\x11\x48\xcb\x92\x04\x25\x79\x96\x3c\x1c\x40\xbe\x9c\x06\xa5\x8e\x5b\xaf\x74\xe7\x75\x98\x89\xe3\xf1\x46\x24\x4d\x1c\x25\xf9\xd8\x5e\x31\x9e\xb2\x71\xc3\xa1\xe9\xf7\xe1\x0b\x8d\xbb\x59\x6a\x37\xb2\xa9\x40\x18\x19\x16\xda\x5e\x42\x53\x6d\x82\x81\xc1\x34\x61\x09\x4c\x43\x8d\x96\x7e\x6b\x9b\x15\x33\x32\xdf\xff\x02\x00\x00\xff\xff\x02\x4a\x2c\xba\x1d\x08\x00\x00")

func tmplJsRequest_loggerJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsRequest_loggerJs,
		"tmpl/js/request_logger.js",
	)
}

func tmplJsRequest_loggerJs() (*asset, error) {
	bytes, err := tmplJsRequest_loggerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/request_logger.js", size: 2077, mode: os.FileMode(420), modTime: time.Unix(1493200909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsUtilJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xdf\xaf\x93\x30\x14\xc7\xdf\xf9\x2b\x1a\x62\x2e\xb0\xc9\x98\x66\x2f\x6e\x63\x44\xaf\x44\x1f\x34\x9a\xdc\xeb\x8b\x94\x25\x1d\x74\x0c\xed\xda\xa5\x3f\xd4\x79\xd9\xff\x2e\x65\x64\x63\x5c\x70\x3e\x78\x9b\x6c\xa5\xe7\xc7\xe7\x7c\x7b\x4e\x41\xb9\xd6\x8a\x26\x32\x67\x14\x64\x58\xde\x32\xc2\xf8\x9b\xfd\x9d\x44\x52\x09\x5b\x54\xdb\x2d\x4b\xb1\x03\x1e\x0c\x50\xaf\x7c\x0d\x1a\x1e\xe0\xfb\x3e\x78\x39\x1e\x83\xa2\x00\x8f\xac\x2f\x9a\x79\x7a\x71\x2c\x15\xa7\xc0\x14\x2a\x49\xb0\x10\xe6\xec\xe4\x3d\x00\x4c\x04\xee\x82\x4f\xc6\x93\x3e\x4c\x8a\x68\x86\xf9\x63\x4a\x77\xf4\x4f\xc4\x69\x4e\xb3\x66\xb8\x71\xfc\x37\x7a\xfa\xf0\x11\xcb\x0d\x4b\xed\x6d\xb5\xb5\x7b\x70\xb4\x56\x12\xad\x77\xe1\xbd\xd5\x27\x32\xa7\x6b\xd6\x7d\xd1\x26\xe1\xf3\xa7\xbb\x7e\xc4\x5f\xdb\x75\x41\xf9\xf2\x1f\x20\x6f\xc3\x0f\xe1\x7d\xd8\xcb\x79\x9a\xa6\x8b\x3d\x95\xe8\xd7\xfb\x3c\xdb\x90\xf2\x27\xed\x6f\x82\xd1\xa6\x02\x7d\x06\x7e\xb5\x8d\x38\xde\x11\x94\x60\xdb\xbb\xf1\xb2\xe7\xc0\xba\x41\xdb\xdd\xcc\x72\xce\xe6\xf9\xd1\x4c\xe4\x85\x75\x71\xb4\x66\xda\x7a\x56\x53\xeb\xbc\xe4\xda\xa6\x0d\xa1\x8a\x90\xfb\xfb\xb5\xfb\x75\xec\xbe\x8a\x1f\x26\x87\x02\xc2\x68\xa9\xe2\x22\x5a\x42\x68\xc6\xce\xa0\x0c\x11\x83\xa9\x13\x14\x70\x65\x4b\xae\x70\xb1\x46\x65\x17\x0a\xaa\x08\x71\xe0\xaa\x70\x03\x98\x0e\xed\x60\x0a\x47\x30\x1d\x38\x41\xf9\x15\xe1\x30\x8e\x86\xd0\x8d\xb5\xc7\x09\x1c\x2d\xe7\x74\x7d\x7b\x8b\x64\xb2\x69\xb7\xfc\x07\xe2\x20\x21\xa2\xbc\xb7\x45\xd5\x76\x85\xb9\x35\xbb\xf0\xeb\xc9\x79\x4b\xd3\x1b\x49\x2c\x64\x8d\x68\x33\x4e\x71\xd3\x67\x57\xe3\xf4\xaa\xeb\x7d\xc7\xfb\x56\xb1\xde\x51\xb7\x32\x85\xe4\xe5\xc0\xbb\x92\x8d\x0e\x54\x25\xed\xdc\xbf\xab\x12\xeb\x22\x2b\xc6\x08\x46\xb4\x55\xa5\xc9\xd4\x83\xf8\x57\x9a\x8e\x6d\xa3\xba\x5e\xb3\x35\x17\x3b\x44\xcb\x2c\x24\x84\x6f\x5a\x60\x58\x01\x86\xc0\x32\x17\xfa\x50\xd5\xd1\xc7\xb9\xa7\xe3\x16\x0d\xe4\xa1\x7e\x72\x07\xe3\x4f\x00\x00\x00\xff\xff\x60\x64\x0c\xd1\x73\x05\x00\x00")

func tmplJsUtilJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsUtilJs,
		"tmpl/js/util.js",
	)
}

func tmplJsUtilJs() (*asset, error) {
	bytes, err := tmplJsUtilJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/util.js", size: 1395, mode: os.FileMode(420), modTime: time.Unix(1493200900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/mapping.js": tmplJsMappingJs,
	"tmpl/js/request_logger.js": tmplJsRequest_loggerJs,
	"tmpl/js/util.js": tmplJsUtilJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"mapping.js": &bintree{tmplJsMappingJs, map[string]*bintree{}},
			"request_logger.js": &bintree{tmplJsRequest_loggerJs, map[string]*bintree{}},
			"util.js": &bintree{tmplJsUtilJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

