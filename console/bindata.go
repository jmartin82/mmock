// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(436), modTime: time.Unix(1481925221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xeb\x53\xe3\x38\x12\xff\x9c\xfc\x15\xbd\xba\xbb\x2a\xa6\xe6\x6c\x13\xb2\x0c\x2c\xd8\xa9\x62\x20\x7b\x14\x45\x06\x66\x92\x83\xdb\xfd\x26\xcb\x6d\x5b\x89\x2c\x39\x92\x9c\xc7\x5c\xcd\xff\x7e\xe5\x47\x5e\x10\x18\xa8\xab\xe5\x43\xa2\x47\xf7\xaf\xfb\xd7\x0f\x35\xf1\x7f\xb9\xba\xbb\x1c\xfd\x71\xdf\x87\xeb\xd1\xe0\xb6\xd7\xf6\x53\x9b\x89\xf2\x0b\x69\xd4\x6b\xb7\xfc\x0c\x2d\x85\xd4\xda\xdc\xc1\x69\xc1\x67\x01\xb9\x54\xd2\xa2\xb4\xce\x68\x99\x23\x01\x56\xef\x02\x62\x71\x61\xbd\x52\xf7\x1c\x58\x4a\xb5\x41\x1b\xfc\x7b\xf4\xbb\x73\x4a\xc0\x2b\x61\x2c\xb7\x02\x7b\x83\x81\x62\x13\xb8\x54\xd2\x28\x81\xbe\x57\x1f\xb6\xdb\x2d\xdf\x30\xcd\x73\x0b\x46\xb3\x80\x78\x1e\x53\x11\xba\xe3\x69\x81\x7a\xe9\x32\x95\x79\xf5\xd2\xe9\xb8\x9d\x23\xf7\xd0\xcd\xb8\x74\xc7\x86\xf4\x7c\xaf\xd6\xea\xbd\x55\x3f\xe3\x89\xa6\x16\x9d\x8e\x7b\xe4\x76\xf6\xc0\xb4\x5b\xfe\x2f\x8e\x03\xb7\xd4\xa2\xb1\xc0\x54\x96\x73\x81\x11\x50\x19\x41\xc6\x25\x8f\x39\x46\x70\x39\x1c\x82\xe3\x94\x26\x05\x97\x13\xd0\x28\x02\x62\xec\x52\xa0\x49\x11\x2d\x81\x54\x63\x1c\x90\x32\x5e\xe6\xcc\xf3\x32\xba\x60\x91\x74\x43\xa5\xac\xb1\x9a\xe6\xe5\xa6\x74\x68\x7d\xe0\x75\xdd\xae\xfb\xc9\x63\xc6\x6c\xce\x2a\xcf\x98\x31\x04\xb8\xb4\x98\x68\x6e\x97\x01\x31\x29\xed\x9e\xfe\xea\x74\xa6\xa7\xd9\xe8\xe6\xee\x62\xb8\x38\x1d\x77\x2e\x8a\x8f\xf4\xf8\xf1\xea\x41\xde\xf3\x23\x31\xf9\x3d\x9e\xcf\xfb\x17\xf4\x34\xbd\xba\x8a\xc6\x7f\x8a\xfc\x16\x93\x45\x3a\x7e\x18\xf4\x3b\x71\x32\x7e\xbc\xff\x57\x36\xf9\x6e\x4e\x08\x30\xad\x8c\x51\x9a\x27\x5c\x06\x84\x4a\x25\x97\x99\x2a\x0c\x59\xb3\xbf\xcb\x2d\x57\x92\x0a\xb0\x29\x66\xf8\x57\x73\x75\x2a\x2b\xaf\x31\x8e\x6f\x1f\x8f\xbe\x1c\x76\xc4\x60\x3a\xa6\x93\xcf\x93\x45\x57\x78\x83\xdf\xfa\x34\x2d\xe6\xf9\x30\xc6\x2f\xb3\x87\x4f\xdd\x9b\x63\xfc\x2e\xbb\xc5\x9f\xdf\x69\x3e\x3a\x2c\x4e\xfa\x7f\x98\xff\x0c\xc6\x5f\x1f\x3e\x1e\xf6\xe5\xb1\xfe\x39\xe3\x57\xf3\x7d\x43\x67\x74\x58\x17\x57\x1d\x8a\xed\x4a\x7b\x2f\xf5\xf1\xd3\x2c\x8f\xf7\x52\x3e\xcc\x86\xe1\xcd\x55\xff\x9a\x53\x11\x67\xc5\xe7\xcf\x5f\xef\x3f\x5d\xfc\xfa\x55\xe7\x7a\x7a\x7c\xf7\x10\x3f\x76\x4f\xee\xbf\x7d\xeb\x8e\x8f\xfb\xb7\xd3\x85\x31\x9d\xe5\xc3\xf4\xce\x4a\xcc\xe5\xf5\xc3\xfd\x6f\xf4\xe6\x64\x31\x7c\x99\xf2\x4e\xad\x37\x4c\xec\x32\xc7\xa6\x7d\x37\x64\x49\x4d\x70\x6c\x1a\x85\xe7\x9d\xb2\xbf\x24\xb6\xc0\xaa\x7c\xd6\x25\x52\xa6\xbc\x92\xaa\x92\xbc\x7e\x55\x24\xcd\x30\x20\x33\x8e\xf3\x5c\x69\xbb\xf5\x96\xcc\x79\x64\xd3\x20\xc2\x19\x67\xe8\x54\x9b\x7f\x02\x97\xdc\x72\x2a\x1c\xc3\xa8\xc0\xa0\x53\xa2\xfc\x84\x42\xaf\xdd\xfa\xfb\x01\x44\x8a\x15\x19\x4a\x0b\x1f\x5c\x8d\x34\x5a\x1e\xc4\x85\x64\x65\x89\x1f\x7c\x80\xff\xb6\x5b\x2d\x80\x19\xd5\x30\x37\x10\x80\xc4\x39\x3c\x62\x38\x54\x6c\x82\xf6\x80\xcc\xcb\xd4\x12\xf8\x08\x42\x31\x5a\x6a\xb8\xa9\x32\x16\x3e\x02\xf1\x90\xa5\x8a\x7c\x38\xaf\xd4\xe7\xc6\x55\x32\x43\x63\x68\x82\x10\xc0\x1a\x1e\x57\xf8\x8d\x89\x8d\xc8\xcd\xf0\xee\x8b\x9b\x97\x6f\xe4\x01\xce\x50\x5a\x37\xa2\x96\x36\x68\x2d\x00\xa1\x92\x6f\x38\x2d\xd0\xd8\x83\x46\xe7\xc3\x79\x79\x55\xfe\x55\x32\x3f\xce\xdb\xad\x1f\x95\xfc\x26\x23\xbe\x57\x3f\xd8\xed\xb6\x1f\xaa\x68\xd9\x6b\x6a\x7b\x68\x29\x9b\x94\xad\x0c\x4c\x89\x22\x93\x06\x94\x84\x4c\x85\x5c\x20\x84\x4b\xc8\xe8\x84\xcb\x04\x94\x44\x88\x0b\x21\xea\x58\x57\x0d\x50\xaa\x28\x9b\xa2\x86\x94\x8a\xb8\xb9\xa8\x3b\x20\xe2\x33\x60\x82\x1a\x13\x90\x32\x63\x94\x4b\xd4\x4e\x2c\x0a\x1e\xad\x32\x48\xa0\xca\x76\x40\x72\x1a\x45\x5c\x26\x67\xd0\x39\xce\x17\xe7\x75\xce\xb6\xd4\xb5\x9a\x57\x67\x4f\x30\x85\x93\x45\x4e\xe7\xa8\x74\xd9\x11\x49\xbd\xaa\x26\x46\x2d\xbc\x23\x9d\x53\x89\x02\xaa\x4f\x27\xd7\x3c\xa3\x7a\x49\xa0\x16\x7b\x2e\xe7\x94\x31\xe2\x32\x69\x70\x5a\x2d\x3f\xed\xee\x0a\x54\x13\x89\x3c\x9d\x53\x69\x77\x85\xe8\x45\x7c\xf6\x22\x7a\x19\xf8\x35\x75\x35\x43\x1d\x0b\x35\x3f\xa3\x85\x55\x6b\x83\xcd\x57\xcb\x2f\xc4\x4a\x57\x70\x63\x9d\x44\xab\x22\x27\xc0\xa3\x80\x54\xcb\xcb\x1d\xc2\x3b\x9a\x5e\x21\x76\xd1\x5e\x77\x2a\x56\xca\xa2\xde\x30\x16\x34\x44\xf1\x24\x3f\x8e\x55\xf9\x19\x74\xfe\x71\xbe\xb1\xe7\x73\x99\x17\xab\xce\x62\x29\xb2\x49\xa8\x16\xb5\x83\x2c\x9d\x5c\x14\x56\x0d\x99\x56\x42\x10\xa8\x2e\x31\x0a\x88\xd5\x05\x12\xe8\x41\x79\x09\xa6\xba\x5d\x19\xf5\x2a\xab\x6b\x1f\xc2\xc2\x5a\x25\x1b\xf0\x7a\x43\x56\x5e\x87\x56\x42\x68\xe5\x26\x99\x96\x86\x5c\x46\xb8\x08\xc8\x61\x6d\x3f\xb4\xf2\x52\x20\xd5\xb7\x2a\x59\x47\x3b\x16\x8a\xda\x33\xcd\x93\xd4\x6e\x48\xf8\x26\xa7\x72\x85\x9b\x88\x65\x9e\x72\xa6\x24\xac\x57\x8e\xc6\x4c\xcd\xd0\x31\x3c\x91\xd5\xeb\x96\x53\xd9\x83\x0a\x7b\x93\xfb\xda\xbd\xe7\xf9\xdf\x2c\xeb\x55\xab\xbd\x75\xf6\xd3\x22\xa7\x02\xb5\x85\xea\xd3\xe1\x32\x56\x6b\x22\x11\x37\xb9\xa0\xcb\x33\xa9\x24\xd6\x74\x2b\xa1\x01\x1a\x83\x32\x41\xd2\x7b\x44\xc1\x54\x86\xee\xc6\xd6\x4b\x46\xe1\x4d\xad\x65\x2c\xb5\xd5\x34\x7c\x4b\x67\xfd\xdf\x8d\x75\x3d\x1a\xdd\xc3\x15\x5a\xca\x85\x79\x5f\x5f\x95\x43\x67\x73\x5f\x06\xc6\x72\x8d\x8c\xe6\x2f\x84\x6e\x4f\xa0\x4d\xc1\x18\x96\x53\x69\xe5\x25\x80\x6f\xac\x56\x32\xe9\xd5\xa5\x52\xa3\xae\x22\x02\x4d\x45\xf8\x5e\x23\x04\xdb\x52\xba\x7e\xa2\x37\x62\xeb\x5a\xdf\x50\x59\x35\xed\x56\xb7\x4b\x3a\x03\x49\x67\x8e\xa5\xa1\x21\x5b\x7e\x08\xbe\xf6\x98\x59\x3e\x2b\x1b\xc9\xa7\xcd\xf8\xfc\x9b\xa5\xe1\xca\x1c\x94\xb3\xc2\xb1\x2a\x49\x4a\xca\x96\x86\xa4\xd7\x0c\x0b\xdf\xa3\x3d\xdf\x13\x7c\x07\xf4\x29\x88\xc9\x95\x34\xb8\x1f\xa5\xbe\x7b\x03\x8c\x28\x1b\xef\x39\xc2\xad\x4a\x9e\x2a\xd7\x8f\xd5\x4e\xe6\x1a\x96\x96\x86\xce\x6a\x5a\x6c\x99\x5a\xe7\x76\x8b\xf1\x96\x46\x59\x0f\x10\xd3\x08\x81\x4b\x68\x02\xb5\xd1\x06\xf0\x73\x8d\x95\x7e\x1a\xad\xf3\xe3\x7b\xb9\xc6\x2d\x13\xdb\xf9\x79\x6a\x71\x15\x9e\x7d\x26\x5f\x36\xd4\x68\xbd\xc3\x52\x15\xc1\xf7\x18\x29\x15\xf6\xe2\xc3\x2b\x75\xd7\x1c\xed\x7d\xae\xda\x5b\x2f\xc7\xea\xa4\xdd\xf6\xbd\xfa\x9f\x07\xdf\xab\x7f\x05\xfe\x2f\x00\x00\xff\xff\x4b\x57\xc6\x8e\x1d\x0e\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3613, mode: os.FileMode(436), modTime: time.Unix(1481925229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x5d\x93\xd3\x36\x14\x7d\xcf\xaf\xd0\xa8\x3b\x58\x26\x1b\x6f\xe8\x6c\x1f\x9a\x6c\x76\x4b\x97\x76\xa0\x03\x65\x86\xf0\xd2\xc6\xa1\xa3\xb5\x6e\x1c\x75\x65\x29\x95\x64\xd2\x40\xf8\xef\x1d\x59\x76\x22\x3b\x1f\xd0\x07\x3e\xa2\x7b\xce\xbd\xd7\x57\x47\x47\xfa\x48\x35\xca\x54\x29\x2d\x9a\xa0\xe1\xb8\xe7\x7e\x6a\xf8\xa7\x04\x63\x0d\x9a\xa0\xd9\x7c\xdc\xeb\x5d\x10\xa6\xb2\xb2\x00\x69\xe3\x44\x03\x65\x1b\xb2\x28\x65\x66\xb9\x92\x24\x46\x9f\x7b\x08\x21\x74\x41\xf0\x77\x0f\x56\xde\x0b\xa0\xfa\xb5\xca\x71\x9c\x64\x82\x67\x8f\x87\xc0\x06\x9c\x6b\x55\xae\xee\x95\x34\x4a\x00\x8e\x13\x28\x56\x76\x43\xe2\x71\x0b\x63\xb9\x86\x8c\xae\x70\x9c\x2c\x39\x83\x6e\x74\xc9\xea\x3e\x5d\xdc\x16\x82\x60\x7c\x04\x61\x56\x4a\x1a\x38\x03\x11\x55\xb7\xed\xe8\x97\x78\xdc\x73\x7f\x7a\x4d\xfb\x88\xcb\x4c\x83\x9b\xc0\xbd\x1b\xd5\xee\x6b\x34\xd8\x52\x4b\x3f\xbf\x7e\x7f\xdc\xfb\x12\x50\xcc\x52\xad\x5f\x80\xa5\x5c\x18\xc2\x59\xc3\x30\x60\xdf\xa9\xf5\x14\x04\x64\x16\x98\x0b\xf8\x92\x42\xe5\x0d\xb8\x19\xff\x8c\xb3\x79\xdc\xc9\x79\xc0\xf6\x69\x2f\x08\x4e\x04\x37\x76\x50\x8d\x75\xc0\x2d\x14\xd8\xed\x55\xa1\x3e\xc2\xbd\xa0\xc6\x90\xc8\xd4\xa4\xbf\xb4\x5a\x47\xbe\xa8\x1b\x80\x56\xeb\x41\x5d\x70\x80\xfb\x9c\xc5\x09\x65\xec\x04\x25\xec\x24\x07\x7b\xaf\x84\xd2\x3f\x6f\xa6\x96\xda\xd2\x10\x53\xfd\x73\xaf\x18\xb8\x9e\xaa\x6f\xe2\x0b\x14\x2c\xa3\xc9\x04\x7d\x3f\x1c\xa2\xed\x16\x75\x17\x9f\x85\xea\xa8\x67\x8a\x4d\x99\x65\x60\x0c\xae\xb7\x04\x81\x30\x70\x24\xe5\xf5\xf0\xfa\x18\x9b\x51\x99\x83\x6e\x93\x0f\x51\x6b\xaa\x25\x97\x79\x03\x6b\x7d\x61\xb0\x23\x7f\x1b\x25\x43\xa5\xef\x85\xb9\xa0\x0c\xde\x96\x96\x3c\x1b\x0e\x9d\x5e\x1c\x20\x38\x41\x68\x82\x7e\x9b\xbe\xfd\x3d\x31\x56\x73\x99\xf3\xc5\xa6\xca\x94\xd4\xd1\x4b\x54\x4a\x06\x0b\x2e\x81\x5d\xa2\xeb\x5a\x07\x9e\xed\x55\x7b\x92\xee\xc3\x07\xfc\x5d\x02\xa1\xf2\xd3\xdc\x52\x9c\xae\xec\x47\x8b\x26\xa8\x55\x28\xd9\x4f\x7c\x7c\x64\x06\xd4\x5a\x4d\xa2\xcc\x69\x26\xba\x44\x11\x15\xa0\x2d\xaa\xfe\x1e\x44\xa8\x7f\x4a\x29\x71\x7c\x2c\x97\x9b\xe7\x2b\x59\x8f\x73\x1f\xf6\x94\xe6\x9c\xd6\x09\xda\xfc\x96\x15\x84\x63\x4e\x0a\xb0\x4b\xc5\x50\x1f\x61\x84\x51\x1f\xb5\x62\x2b\x6a\x97\x41\xa2\x03\x4f\x31\x1b\x69\xe9\xbf\x2f\x79\xbe\x14\x3c\x5f\xda\xe6\x6c\xc6\x1d\x4e\xdb\x65\x0e\x49\x3e\xde\x66\x05\xc6\xd3\x25\x08\x95\xc7\xfe\xbc\xb5\xe4\xf8\xce\x17\x6f\xc9\xf1\x7f\xec\x9a\x83\x72\x86\x26\x07\x66\xb6\x0f\x33\x6a\xc1\xf2\xc2\x29\xcf\x6d\x5b\xa9\x35\x48\xfb\x9e\x17\x10\x82\x16\xa5\x10\xaf\x2b\x85\xed\xe0\x6e\xb6\x37\x83\xc3\xf1\x7e\x6d\xf4\xe3\xda\x45\xf7\x86\x57\x7f\xc5\x7e\x50\x9d\x8b\x82\xae\x56\x20\x19\x89\x6e\x04\x47\x9c\x4d\x70\xe8\x5f\x4e\x6d\xdc\x55\x8b\x30\xaa\xe4\x38\xc1\x1d\x53\x44\x9d\xdf\x67\x05\xea\x13\x29\x59\xdd\x64\x13\x1c\xfa\xf9\xbe\x52\x3c\xae\xbd\x64\x41\x85\x01\x7c\xeb\x22\xcd\x80\xfa\x28\xba\xb9\x12\xfc\xb6\xb6\xdb\xee\x8d\x50\xad\x65\xee\xc6\x7c\x2b\xd8\x6b\x95\x9b\x66\xc8\x26\xd3\xaa\xca\x60\x5e\xa8\xb5\x24\x5d\x25\xb4\x29\x81\x0e\x84\xca\x5f\x59\x28\xa6\xfc\x93\xdb\xc0\xee\xf0\x90\xe0\x38\x4e\x0c\xff\xb4\xdb\x4c\x67\xa6\x21\xe7\x16\xfd\x30\x6c\xdf\xd3\x51\x37\xc3\x68\xc1\xb5\xb1\x51\x73\xb7\x34\x99\xda\xce\xd9\xed\xbf\x4e\xe9\xca\xb9\xa6\xb2\xe5\xe3\xf3\xd2\xaa\x69\x85\xc2\x71\xc2\x0d\x89\x46\xd9\x12\xb2\x47\x60\x51\xfc\x95\x87\x82\xcf\xfd\x5e\xad\xc8\x91\x60\x0e\x96\x0c\x1b\xcc\x4b\x70\x67\xe9\x68\x83\x5d\x6d\x07\x33\xcc\xfc\xba\x53\x36\x9a\x20\x09\x6b\xf4\x82\x5a\x38\x71\x46\x02\xb0\xab\xed\x91\x4e\xed\x57\x18\xf5\x77\x5f\x41\x3a\xb0\x37\x4a\xda\x65\x85\x7b\x76\x08\xee\x60\x7f\x2d\x85\xf8\x03\xa8\xf6\x69\xd1\x4f\xe8\x0c\xf6\xa5\x2a\xb5\xf1\xc0\xd1\x19\xd8\x1b\x2e\x4b\x0b\xdf\x00\x9c\x42\xa6\x24\xdb\xa9\xb2\xd6\x79\xf3\xf9\x9d\x87\x49\xc7\xc1\x42\x8b\x72\xff\xdf\x9b\xd3\x4a\xd0\x0c\xc8\xd5\x93\xab\xfc\x12\x45\x4f\x68\xb1\x1a\x57\x6a\xaa\x97\x6f\xfc\xb2\xb0\xad\xd5\x5b\xbf\x9a\xbb\xd5\x56\x33\xed\x9c\x04\x93\x34\x2d\x67\x74\xf0\xe9\xf9\xe0\xcf\xe1\xe0\xc7\xf9\xe7\xeb\x2f\xdb\x34\x9d\x7d\x28\xe7\xdb\xd9\x87\x34\xc5\xf3\xf8\x29\x26\xa9\x79\x3a\x8a\xef\xb6\xe9\x03\xb1\xba\x84\x6d\x75\x6e\xb7\xb2\x14\x22\x4e\x1f\xb6\x83\xbb\x94\xf5\xc9\xdd\x28\x4d\x52\xf6\x34\xbe\x23\x77\xa3\x19\xfc\x32\x9f\xf5\xd3\xc1\xdc\x45\xe2\xbb\xd8\xb5\xb2\x7b\xd5\x16\xd4\x66\xcb\x50\xb1\x95\x84\x84\xf3\xe2\x48\x96\xc5\x03\xe8\x68\xff\xde\x74\xfa\xbf\xfa\x80\xaf\x12\xeb\x4c\xdc\x53\x43\xee\x0e\x33\xba\x38\x8b\xf1\xb6\x51\xd5\x78\x84\x4d\x50\xe0\xe8\x53\xa7\xc3\xf0\xef\x81\x2e\xa9\xd7\xa1\x57\x6d\xec\xc7\x73\xb6\x9d\x3a\xf1\x83\x52\x02\xa8\x0c\x32\x87\xb9\xdc\x7c\xbf\x25\x8b\xc3\x85\x29\xba\x2f\xb6\xe8\xc6\xac\xa8\x6c\xdc\xdd\x99\xad\x23\x3a\xa3\xae\x9c\xb7\xca\xed\x7d\xd7\xe1\x6e\xa3\xe0\x3d\xff\x5f\x00\x00\x00\xff\xff\x78\xfe\x0e\x63\xe9\x0c\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3305, mode: os.FileMode(436), modTime: time.Unix(1481925229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/script.js": tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

