// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xdd\x6a\xdc\x40\x0c\x85\xaf\xbb\xe0\x77\x10\x84\xde\x84\x4e\x62\x6f\x97\xb4\xd8\x57\xe9\x4f\x5e\xa3\xcc\x8f\x6c\x0f\x96\x47\x46\x3b\xae\x1d\x4c\xde\xbd\xf8\x6f\xb7\x85\xb0\x65\xee\x74\x3e\x9d\x39\x1c\x19\x76\xaf\x30\x25\x07\x00\x00\xf2\x01\x55\x8d\xbe\xaa\x63\x0e\xd9\xc3\x13\xb6\x05\x3c\xde\x43\xe9\x47\x28\x59\x20\xd6\xda\x43\xc9\x21\xde\x3f\x26\x87\xb7\xe4\x30\xbf\x3a\xb6\xf4\x09\xfe\x36\xb9\xec\xa7\xe9\xc7\x62\xe3\x1e\x2c\x87\xa8\x7d\x40\x51\x25\xf5\xde\x4d\xc9\xe1\x43\xeb\x83\x7a\x97\xed\x74\x40\x52\x17\xcb\x9d\xf9\x7c\x4c\xbb\xb1\x80\x8d\xca\x73\x35\xa0\x69\x7c\x54\x67\x2b\x4c\x64\xb4\xec\x01\x06\xef\x62\x9d\x43\x76\xec\xc6\xd5\xf3\x1d\x56\x45\xd1\xb6\xd9\x37\x8c\xb6\x4d\x25\xdc\x07\xa7\x2c\x13\x4b\x0e\x77\xdf\x9f\x7f\x9e\x5e\x9e\x8b\x4d\x67\x71\x28\x8a\xb0\x9c\xb3\x76\x23\x9c\x99\xbc\x83\x3b\x6b\xed\x8d\x1f\xea\xbe\x35\x37\x7e\x38\x1d\xbf\x1a\xab\xff\xb3\x9f\xd7\xfc\x1b\xe5\x86\x4b\xf6\xe3\xcb\xe9\xdb\x4b\x71\xb9\x47\x27\xb8\xc0\x5b\x6b\xd9\x53\xba\xb4\x00\x30\xfb\x94\xc4\x43\xae\xfb\xc8\xcb\x64\xed\xe9\x9f\xea\xcf\x48\x68\x23\xba\x5f\xc2\x03\x4c\xcb\xad\xd5\xb0\xf5\x6f\x98\x5c\xf1\x36\x43\x51\x7c\xa8\x60\x82\x2d\x43\x25\x88\xa1\x80\x59\x0a\x7d\x6b\xe6\xb8\xbb\xe4\xb4\x34\x2c\x3a\x54\xb8\xea\x86\x99\x50\x87\x2b\x60\xa8\xc7\x7d\x95\xe8\x3a\x6f\x75\x85\x21\xea\x55\x6a\xf0\xf5\xaa\x08\xba\x65\xfa\x27\x00\x00\xff\xff\xc1\x41\x24\x42\xb8\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 696, mode: os.FileMode(438), modTime: time.Unix(1478706022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x6d\x6f\xdb\x38\x12\xfe\xec\x05\xfa\x1f\x66\x79\x77\x40\x8a\x9e\xa4\x38\xde\xb4\xd9\x44\x32\x90\x26\xde\x2d\x02\xa7\x49\xeb\x5c\x72\xbb\xdf\x28\x69\x24\xd1\xa6\x48\x85\xa4\xfc\xd2\xc3\xfe\xf7\x03\xf5\x62\x2b\xae\xd3\x24\x8b\x1e\xb0\xd7\x02\xb6\x44\xce\x3c\xcf\xbc\x93\x8e\xff\xe3\xf9\xd5\xd9\xcd\x6f\xd7\x23\xf8\x70\x73\x39\x1e\xbe\xfa\xc1\xcf\x4c\xce\xab\x6f\xa4\xf1\xf0\xd5\x0f\x3d\x3f\x47\x43\x21\x33\xa6\x70\xf0\xbe\x64\xf3\x80\x9c\x49\x61\x50\x18\xe7\x66\x55\x20\x81\xa8\x7e\x0b\x88\xc1\xa5\xf1\xac\xf6\x09\x44\x19\x55\x1a\x4d\xf0\xaf\x9b\x5f\x9c\x23\x02\x5e\x85\x63\x98\xe1\x38\xbc\xbc\x94\xd1\x0c\xce\xa4\xd0\x92\xa3\xef\xd5\x8b\xaf\x7e\xb0\x02\x3a\x52\xac\x30\xa0\x55\x14\x10\xcf\x8b\x64\x8c\xee\xf4\xbe\x44\xb5\x72\x23\x99\x7b\xf5\xa3\xd3\x77\xfb\x07\xee\xbe\x9b\x33\xe1\x4e\x35\x19\xfa\x5e\xad\x35\x7c\x36\x40\xce\x52\x45\x0d\x3a\x7d\xf7\xc0\xed\xef\xc2\xb1\x48\x3f\x3a\x0e\x8c\xa9\x41\x6d\x20\x92\x79\xc1\x38\xc6\x40\x45\x0c\x39\x13\x2c\x61\x18\xc3\xd9\x64\x02\x8e\x53\xb1\x72\x26\x66\xa0\x90\x07\x44\x9b\x15\x47\x9d\x21\x1a\x02\x99\xc2\x24\x20\x36\x6c\xfa\xd8\xf3\x72\xba\x8c\x62\xe1\x86\x52\x1a\x6d\x14\x2d\xec\x8b\xb5\x69\xbd\xe0\x0d\xdc\x81\xfb\xd6\x8b\xb4\xde\xac\x55\xc6\x45\x5a\x13\x60\xc2\x60\xaa\x98\x59\x05\x44\x67\x74\x70\xf4\x93\xd3\xbf\x3f\xca\x6f\x2e\xae\x4e\x27\xcb\xa3\x69\xff\xb4\x7c\x43\x0f\xef\xce\x6f\xc5\x35\x3b\xe0\xb3\x5f\x92\xc5\x62\x74\x4a\x8f\xb2\xf3\xf3\x78\xfa\x3b\x2f\xc6\x98\x2e\xb3\xe9\xed\xe5\xa8\x9f\xa4\xd3\xbb\xeb\x5f\xf3\xd9\x17\xfd\x8e\x40\xa4\xa4\xd6\x52\xb1\x94\x89\x80\x50\x21\xc5\x2a\x97\xa5\x26\x9d\x00\x5c\x15\x86\x49\x41\x39\x98\x0c\x73\xfc\x9f\xbb\xeb\x54\x34\xdf\x72\x3a\x19\xdf\x1d\x7c\xdc\xef\xf3\xcb\xfb\x29\x9d\xbd\x9f\x2d\x07\xdc\xbb\xfc\x79\x44\xb3\x72\x51\x4c\x12\xfc\x38\xbf\x7d\x3b\xb8\x38\xc4\x2f\x62\x50\xfe\xfe\x85\x16\x37\xfb\xe5\xbb\xd1\x6f\xfa\xdf\x97\xd3\x4f\xb7\x6f\xf6\x47\xe2\x50\x3d\xc7\xe9\x6f\x66\xfd\x82\xce\xe9\xa4\x2e\xb2\x26\x1a\xdd\x92\x7b\xa9\xf7\xd3\xed\x5c\x4f\x77\x7a\xbd\x9f\x4f\xc2\x8b\xf3\xd1\x07\x46\x79\x92\x97\xef\xdf\x7f\xba\x7e\x7b\xfa\xd3\x27\x55\xa8\xfb\xc3\xab\xdb\xe4\x6e\xf0\xee\xfa\xf3\xe7\xc1\xf4\x70\x34\xbe\x5f\x6a\xdd\x5f\xdd\xde\x5f\x19\x81\x85\xf8\x70\x7b\xfd\x33\xbd\x78\xb7\x9c\x3c\xee\xf5\x56\xd1\x37\xbe\x98\x55\x81\x4d\x37\x6f\xfc\x25\xb5\x8b\x53\xdd\xa8\xec\x6a\x9a\xdd\x95\xd1\x81\xab\xd2\x5a\x57\x8a\xcd\x7c\x25\x55\xe5\x7a\x33\x67\x04\xcd\x31\x20\x73\x86\x8b\x42\x2a\xd3\x99\x2e\x0b\x16\x9b\x2c\x88\x71\xce\x22\x74\xaa\x97\x7f\x02\x13\xcc\x30\xca\x1d\x1d\x51\x8e\x41\xbf\x82\x79\xc2\x0d\x2b\xf2\xf7\x3d\x88\x65\x54\xe6\x28\x0c\xbc\x76\x15\xd2\x78\xb5\x97\x94\x22\xb2\xd5\xbe\xf7\x1a\xfe\x63\x51\x00\xe6\x54\xc1\x42\x43\x00\x02\x17\x70\x87\xe1\x44\x46\x33\x34\x7b\x64\x61\x53\x4c\xe0\x0d\x70\x19\x51\xab\xe2\x66\x52\x1b\x78\x03\xc4\xc3\x28\x93\xe4\xf5\x49\xad\xbf\xd0\xae\x14\x39\x6a\x4d\x53\x84\x00\xd6\x04\xb8\x66\x68\x48\x36\x32\x17\x93\xab\x8f\x6e\x61\x47\xe7\x1e\xce\x51\x18\x37\xa6\x86\xb6\x78\x3d\x00\x2e\xd3\xcf\x78\x5f\xa2\x36\x7b\x8d\xd2\xeb\x13\xbb\x65\xff\xd5\x42\x7f\x9c\x54\xa9\xe8\xf5\xfe\x84\xf5\x5c\xa6\xcf\x36\xbe\x61\x78\xbe\xe9\x0b\xc5\x0c\x8e\x65\xfa\x2d\xc3\x7b\x7f\xd4\x0a\x9d\xb2\xf2\xbd\xe6\x18\xb2\xff\xfd\x50\xc6\xab\x61\xdb\xa8\x13\x43\xa3\x99\x1d\x4d\x10\x49\x5e\xe6\x42\x83\x14\x90\xcb\x90\x71\x84\x70\x05\x39\x9d\x31\x91\x82\x14\x08\x49\xc9\x79\x5d\x32\x55\x37\x5b\x15\x69\x32\x54\x90\x51\x9e\x34\x1b\x4d\x3b\xc7\x6c\x0e\x11\xa7\x5a\x07\xc4\x56\x1e\x65\x02\x95\x93\xf0\x92\xc5\x6d\x25\x12\xa8\xca\x36\x20\x05\x8d\x63\x26\xd2\x63\xe8\x1f\x16\xcb\x93\xa6\xf6\x3a\xfa\x4a\x2e\xea\xc5\x2d\x54\xee\xe4\xb1\xd3\x3f\xb0\x56\x3b\x3c\xad\x9f\xaa\xc3\xb0\x91\x7e\x20\x5e\x50\x81\x1c\xaa\x4f\xa7\x50\x2c\xa7\x6a\x45\xa0\x91\xfb\x5a\xd0\xb1\xc1\x62\x22\x6d\x91\x7a\x3d\x3f\x1b\x3c\x94\xa8\xce\x5b\xb2\x7d\x0a\x67\x83\x35\xa6\x17\xb3\xf9\xe3\x04\x36\x03\x04\x58\x1c\x90\x98\xcd\x7f\x55\xb2\x2c\x1a\x8c\x75\x58\xe4\x1c\x55\xc2\xe5\xe2\x98\x96\x46\x6e\x0c\x69\xbf\x7b\x7e\xc9\x5b\x48\xce\xb4\x71\x52\x0b\x52\x43\xa6\x5d\xbc\xb5\x66\x57\xd7\x2b\xf9\x36\xe2\x13\x06\x27\x52\x1a\x54\x9d\x80\x70\x1a\x22\xdf\xca\xa1\x63\x64\x71\x0c\xfd\x7f\x9c\x74\x58\x7d\x26\x8a\xb2\x9d\x22\x51\x86\xd1\x2c\x94\xcb\xda\xce\x28\x9b\x9d\x96\x46\x4e\x22\x25\x39\x27\x50\x6d\x62\x1c\x10\xa3\x4a\x24\x30\x04\xbb\x09\xba\xda\x5d\xd3\x7a\x15\xef\xc6\x8c\xb0\x34\x46\x8a\x06\xbe\x7e\x21\xad\xe5\xa1\x11\x10\x1a\xb1\x49\xb8\xa1\x21\x13\x31\x2e\x03\xb2\x5f\x5b\x10\x1a\x71\xc6\x91\xaa\xed\xe0\x27\x5c\x52\x73\xac\x58\x9a\x99\x8e\x2f\xbe\x2e\xa8\x68\xc1\x53\xbe\x2a\x32\x16\x49\x01\xeb\x27\x47\x61\x2e\xe7\xe8\x68\x96\x8a\x6a\xa8\x17\x54\x0c\xa1\x22\xd8\x94\x48\x6d\xe3\xae\x32\xe9\x3c\xd7\x8f\xbd\xba\x89\xdb\xd5\xa7\x9b\x82\x72\x54\x06\xaa\x4f\x87\x89\x44\xae\xfd\x89\x99\x2e\x38\x5d\x1d\x0b\x29\xb0\xf6\xbc\x12\xba\x44\xad\x51\xa4\x48\x86\x77\xc8\x23\x99\xa3\xdb\x61\x7b\x94\x17\x9e\xd7\x8d\xda\x50\x53\x5f\x09\x9e\xd3\x8c\xdf\xa1\x17\x3f\xdc\xdc\x5c\xc3\x39\x1a\xca\xb8\x7e\x69\x2b\x0e\x9b\x71\xdf\x4a\xd8\x10\x19\xa6\x30\xa2\xc5\x23\x41\xdc\x11\x72\x5d\x46\x11\xda\xa3\x79\x6d\x2a\x80\xaf\x8d\x92\x22\x1d\xd6\xb5\x53\xc3\xb6\x91\x81\xa6\x44\x7c\xaf\x11\x82\xae\x94\xaa\x4f\xa8\x8d\xd8\xa6\x07\x3a\xfe\xac\x9b\xba\x33\x0f\x04\x9d\x83\xa0\x73\xc7\xd0\x50\x93\xae\x2d\x9c\xad\xcd\x8e\x0c\x9b\xdb\x26\xf3\x69\x73\x91\xf8\x9b\xa1\x61\x4b\x09\xf6\xd0\x71\x8c\x4c\x53\xeb\xb7\xa1\x21\x19\x36\xe7\xa5\xef\xd1\xa1\xef\x71\xf6\x10\x75\x1b\x45\x17\x52\x68\xdc\x0d\x53\xef\x7d\x85\xd3\xfb\x0a\xa6\x40\xa5\xd9\x6e\x63\xae\xeb\xad\xe7\x18\x63\x0f\xe3\x1d\x08\x63\x99\x7e\xa5\xdd\x4c\xc5\xad\x4a\x68\x02\x66\x68\xe8\xb4\x27\x57\x97\x6f\x5d\x2c\x9d\xe8\x75\x54\x6c\x89\x41\x42\x63\x04\x26\xa0\x09\x7a\x47\x1d\xc0\x2f\x14\x56\x00\x59\xbc\x4e\xb8\xef\x15\x0a\xbb\x24\x0f\x12\xbe\x4d\xda\x06\x7b\x17\xeb\x37\xb8\x1a\xb5\x27\xc8\x7a\x5d\xae\x75\x46\x5e\x44\xd5\x6a\xed\x66\x82\x47\xfc\xaa\xf2\xf6\x22\x1e\xab\xf1\x14\xc7\xce\xd6\x69\x17\x1f\x99\xc2\xf5\xc6\x83\xe7\xff\x97\xdb\xc9\x68\x89\x51\x69\xef\x9b\x30\x96\xe9\x8b\x67\xe2\x83\xeb\xc9\xd8\xe6\xe3\x3b\x5d\x4d\x2c\xd6\x5f\xfb\x5a\x32\x96\xe9\x5f\xe4\x66\xd2\x8d\xfb\xf7\xbf\x95\x54\x63\xf0\x4f\xdf\x48\x36\x3d\x51\xfd\xaa\xf0\x9a\x9f\x15\xbe\xd7\xfc\xe9\xeb\xbf\x01\x00\x00\xff\xff\x9a\x34\xbc\x89\x14\x13\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 4884, mode: os.FileMode(438), modTime: time.Unix(1481097669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xd1\x72\xdb\xb6\x12\x7d\xf7\x8c\xff\x01\x83\xeb\x31\xc9\xc8\xa2\x94\x3b\xbe\x0f\x57\xb2\xec\xa6\x4e\xdb\xa4\xe3\x34\x33\x71\x5e\x5a\x49\xe9\xc0\xc4\x8a\x42\x0d\x01\x0a\x00\x46\x71\xa2\xfc\x7b\x07\x04\x29\x12\x24\x25\x3b\x9d\xbe\xd8\x23\xec\x39\x07\x8b\xdd\xc5\x2e\xf8\x89\x28\x94\xc8\x4c\x18\x34\x41\xc3\xf1\xf1\x91\xfd\xad\xe0\x63\x06\xda\x68\x34\x41\xd3\xf9\xf8\xf8\xe8\xf8\xe8\x24\xa4\x32\xc9\x56\x20\x4c\x14\x2b\x20\xf4\x21\x5c\x64\x22\x31\x4c\x8a\x30\x42\x5f\x8f\x8f\x10\x42\xe8\x24\xc4\xff\xb9\x33\xe2\x9a\x03\x51\xd7\x52\x68\xc9\x01\x47\x71\xc2\x59\x72\xdf\x81\x2e\x19\xa9\x92\xd9\xba\x82\xc3\x6a\x6d\x1e\xc2\x68\xec\x83\x0c\x53\x90\x90\x35\x8e\xe2\x25\xa3\xd0\x32\x2f\x69\xe1\xb1\x05\x98\x15\x0f\x31\xee\x82\xe8\xb5\x14\x1a\x0e\x61\xd6\xa0\x34\x3b\x2c\xc3\x65\xda\x36\x7f\x8b\xf2\x28\x35\xa3\x70\x93\x63\x9f\x14\x01\x07\xf5\x4f\x9f\xab\x16\xd2\x25\x1d\x31\x91\x28\xb0\x89\xb8\xb6\x49\xab\xd4\x14\x98\x4c\x09\x97\xca\x5e\xcf\x12\x3d\x9a\x5e\xca\xcd\x4b\x30\x84\x71\x1d\x32\xba\x63\x69\x30\xef\xe4\xe6\x16\x38\x24\x06\xa8\xb5\x14\x7b\x73\x99\x96\xf0\xb2\x1a\xa6\x8c\xce\xa3\xb6\x70\x4b\xa1\xd0\x3e\x09\x71\xcc\x99\x36\xfd\xfc\x7c\x7d\x66\x60\x85\x6d\xf1\xac\xe4\x27\xb8\xe6\x44\xeb\x30\xd0\x05\xeb\x4f\x25\x37\x41\xb1\xb3\x8d\x88\x92\x9b\x7e\xb1\x6b\x1f\xf7\x18\x8d\x62\x42\xe9\x3e\x8e\xef\x4e\x0a\xe6\x5a\x72\xa9\x7e\x7c\xb8\x35\xc4\x64\x3a\xd4\xf9\xbf\x6b\x49\x21\x77\xcc\x9d\x8e\x2d\x50\xcd\x80\x26\x13\xf4\xdf\xe1\x10\x6d\xb7\xa8\xb9\xf8\xdc\xcb\x56\x11\x63\xac\xb3\x24\x01\xad\x71\x99\x27\x04\x5c\x43\x87\xe8\xf9\xf0\xbc\x93\x4f\x89\x48\x41\x35\xe8\x1d\xb8\x0d\x51\x82\x89\x74\x07\x6c\x1e\xb6\x96\xa4\xbf\xb4\x14\xde\x4d\xac\xae\xcc\x82\x50\x78\x9b\x99\xf0\xf9\x70\x58\x95\x29\x5b\xe4\x94\xb8\xbc\x15\x71\x51\xfa\x40\xd1\xe9\x29\xda\x63\x8a\x05\x59\xe5\x07\xc3\x38\xaa\xb9\x4b\x81\x83\x01\x9f\x34\xc5\x3b\x16\x9e\x57\xfe\xfb\x9b\x17\x90\xdd\x8e\xc5\xef\x27\x6c\x53\x20\xa7\xd8\x42\xeb\x1b\x74\xc8\xc7\x05\x71\x32\x41\x0b\xc2\x35\x3c\xaa\xe9\x16\x1f\x53\x25\xab\x8f\xeb\x96\xe7\x76\x31\xce\x14\x7f\xa2\xf7\x16\xde\x0e\x4f\xad\x05\xa3\x09\xfa\xf5\xf6\xed\x6f\xb1\x36\x8a\x89\x94\x2d\x1e\xca\xac\xe5\xd6\x33\x94\x09\x0a\x0b\x26\x80\x9e\xa1\xf3\xf2\xea\x3a\xba\x4b\xc3\x5e\xbe\x33\xef\x17\x28\x53\xd3\xcd\x2f\xac\x6d\x7a\x25\xc0\x65\xba\x7f\xf3\x8c\x1f\xf0\xdd\xdd\x21\x34\x69\x54\x61\x75\xb5\xc6\x5d\x55\x4e\x8c\x51\x61\x90\xd8\x26\x11\x9c\xa1\x80\x70\x50\x06\xe5\x7f\xfb\x01\xea\xed\xeb\x0b\x51\xd4\x29\x66\xaf\xcc\x6b\x51\xde\x98\xca\xee\x48\x65\xff\x2f\x24\x1a\x0a\xde\x20\xaa\x67\x2b\x5e\x81\x59\x4a\x8a\x7a\x08\x23\x8c\x7a\xc8\xb3\xad\x89\x59\xd6\x95\x5a\x23\x4d\x3f\x08\x43\x3e\xbf\x62\xe9\x92\xb3\x74\x69\xca\xae\x1c\x35\x49\xfe\x90\x6b\xb3\x9c\xbd\x41\x6b\xcc\xbd\x26\xab\x30\x37\x48\xb5\x49\xd8\x24\x70\x99\x46\xbb\xde\xec\x37\xac\x77\xce\x6f\xbf\x61\x7d\x4f\xda\x2d\x96\x51\x34\x69\x4d\xc2\x9a\x9d\x12\x03\x86\xd9\x26\x92\x27\x3e\x53\x0a\x84\x79\xcf\x56\xe0\xa1\x16\x19\xe7\x37\x79\x99\xee\xf0\x36\x37\x17\xfd\x76\x7a\x1e\x4b\xdd\xb8\x1c\xc2\xd5\xa8\x2c\x4e\x52\x0b\x59\xe3\xa9\x43\xd6\x6b\x10\x34\x0c\x2e\x38\x43\x8c\x4e\x70\x7d\xea\xd9\x92\x65\x76\xbf\x00\xa3\xbc\xa6\x27\xb8\x31\x4b\x51\xe3\xf7\xc1\x2a\x77\x42\x52\xe4\x4f\x91\x09\xae\x3f\x06\xaa\x9d\xa2\x71\x31\x77\xf2\x2e\x89\x2f\xad\xa5\x0c\x51\x0f\x05\x17\x03\xce\x2e\xcb\x29\xdd\x7c\x4f\xb8\xc5\xc4\x3e\x7a\xde\x72\x7a\x23\x53\xbd\x8b\xb4\x4e\x94\xe4\xbc\x38\xf6\x4b\xb9\x11\x61\x7b\x6a\x6f\x14\x33\x70\x23\xd3\xd0\xc0\x67\xe3\x55\xc5\xbf\x91\x49\x2b\xda\x4c\x83\x7b\x6f\xd5\x53\xd0\x1d\xe6\x47\xc2\x70\xe0\xc4\x76\xc9\x3f\x6e\xed\xc0\x3e\xaf\x7e\x60\x2e\xd3\xd7\x06\x56\xb7\xec\x8b\x3d\x73\xb3\x6c\x10\x67\x38\x8a\x35\xfb\x52\x9d\xdf\x3e\x3b\xea\xa4\x4b\xf4\xbf\x61\xe3\x8d\x19\x34\x35\x46\x0b\xa6\xb4\x09\xca\xe7\x58\xf5\xe2\x6c\xbd\xee\xda\xc9\x2b\xa5\xed\xbe\xd6\xbd\x64\x79\xff\x22\x33\xf2\x36\x47\xe2\x28\x66\x3a\x0c\x46\xc9\x12\x92\x7b\xa0\x41\xd4\x7a\xed\x52\xf6\xe9\x17\xff\x1e\xb8\x3d\xde\xcb\x75\xd8\x6d\x4f\xc1\x84\xc3\x12\xf6\x0a\x6c\x83\x79\xc4\xdf\x2a\xf4\x1d\xce\xde\xc8\xf4\x9f\xf8\xeb\x0a\xa6\xdb\x57\x67\xfb\x1e\x3f\x9b\xb5\x5c\xaf\x80\xc4\x19\x6c\x25\xa3\x09\x12\xb0\x41\x2f\x89\x81\x7d\xfd\xad\x86\xb6\x1e\x38\xa8\xad\xfe\x01\x46\xbd\xea\x28\x61\x03\xf7\x46\x0a\xb3\xcc\x81\xcf\x3b\xd0\x0d\xf0\xcf\x19\xe7\xbf\x03\x51\x4e\x18\xfd\x80\x0e\x81\x5f\xc9\x4c\x69\x87\x1c\x1d\xc2\xbd\x61\x22\x33\xf0\x14\xe4\x2d\x24\x52\xd0\xea\x7e\x15\x6d\xaa\x0c\x42\xfb\x93\xa4\x31\x8d\xbc\x51\x63\x7f\x54\x43\x66\xcd\x49\x02\xe1\xe0\x74\x90\x9e\xa1\xe0\x94\xac\xd6\xe3\xfc\x52\x14\xcb\x17\x6e\x99\x1b\x6f\xf5\xd2\xad\xa6\x76\xd5\xf7\xc8\x17\x0d\x71\x38\x9b\x65\x53\xd2\xff\xf2\xa2\xff\xc7\xb0\xff\xff\xf9\xd7\xf3\x6f\xdb\xd9\x6c\xfa\x21\x9b\x6f\xa7\x1f\x66\x33\x3c\x8f\x9e\xe1\x70\xa6\x9f\x8d\xa2\xab\xed\xec\x2e\x34\x2a\x83\x6d\xde\x7b\xb7\x22\xe3\x3c\x9a\xdd\x6d\xfb\x57\x33\xda\x0b\xaf\x46\xb3\x78\x46\x9f\x45\x57\xe1\xd5\x68\x0a\x3f\xcd\xa7\xbd\x59\x7f\x6e\x2d\xd1\x55\x64\x7d\xd9\x7d\x5a\xae\x88\x49\x96\x5e\x05\xe7\xf5\xc4\xed\x54\x0d\x44\xb6\xba\x03\x15\xd4\x3e\x68\xed\xa5\x18\x7c\xc0\x83\xd8\xd8\x81\xec\xc8\x1e\x7b\x07\x1a\x9d\x1c\x06\xb9\x56\x98\x6f\x73\x0f\x0f\xf5\x3d\x50\xe7\x07\x4e\x83\xe3\x1e\x88\x2d\x5a\xf5\xb3\xf6\x85\x35\xa8\xc2\x74\xd8\xa7\x42\xfb\x4e\x4a\x0e\x44\xd4\xc5\xeb\x6a\x36\xd2\x4f\xd2\xb1\x40\x4f\xa4\xf5\xb9\x16\x5c\xe8\x35\x11\xe5\x1c\xb1\x63\xc3\x52\xed\xe4\xcd\x67\x48\x2e\xef\x26\x88\xc5\x5d\x06\xde\x57\xfe\xdf\x01\x00\x00\xff\xff\x8b\x3d\xf6\x1c\x87\x11\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 4487, mode: os.FileMode(438), modTime: time.Unix(1481097475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
