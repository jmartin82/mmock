// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/mapping.js
// tmpl/js/request_logger.js
// tmpl/js/util.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xcf\x6e\xa3\x30\x10\x87\xcf\xeb\xa7\xb0\x94\xeb\x82\x94\x28\xd2\xae\x8c\xb4\x52\xb6\x6d\x5e\xa3\xf2\x9f\x01\x2c\x26\x1e\x34\x38\x4d\xa2\x28\xef\xde\x81\xd0\xa6\x87\x52\x2e\xc0\xef\x1b\x7f\xe3\x19\x63\x8a\x13\xb8\x2e\xe6\x62\xf0\x4c\x88\xce\xb2\xbe\x2a\x2d\xcf\x29\x86\xdc\x1a\xbd\xde\xf4\xe7\x4a\xdd\xd4\x37\x85\x45\x66\xeb\xbb\xb9\xdc\xc9\x67\xc3\x74\x4c\xa1\xf0\x84\xc4\x46\xaf\x9e\x76\x2f\xdb\xfd\xae\xba\x63\xe2\x00\x5c\x20\xd4\x59\x9c\xfd\x59\x0f\x84\x31\xe8\x95\xf7\x7e\xd1\xde\x1e\x0f\x6e\xd9\xbe\xdd\xfc\x75\xde\xfe\x78\xd8\xb4\xf4\x06\xbc\xac\x58\x3f\xff\xd9\xfe\xdf\x8f\x0a\xa5\xca\x01\x10\x7c\x86\xf0\xca\x74\xd2\x57\x5d\x53\xca\xa2\x8d\x4d\x2b\x17\x76\x84\xa1\xba\x49\x4d\xe6\x98\x1a\xa1\xb3\xa1\x61\x80\x54\x69\x21\x49\xda\x8d\xad\x3e\x48\xb0\xdc\x11\xdb\xd4\xc0\x84\x1d\x11\x82\x4d\x0f\xee\xf0\x08\xf3\x41\xc4\x47\x7c\xb0\x0d\xa4\x6c\x27\xd2\xc1\xe5\x01\x18\xc2\x18\xaa\x6c\x1d\x82\x2e\x25\x45\xdb\x0f\x50\x46\x71\xaa\x5f\x21\x0e\x3d\xda\x8b\x99\x68\x21\x03\x4c\x33\x95\xf7\xdf\xfb\x12\xfe\xe9\xec\x28\x5c\xc6\x37\xcf\xb3\x8e\x85\xe6\x93\x86\xdf\xea\x4b\x3e\x25\xcb\x9b\xab\xeb\x5a\x5a\xbc\x07\x00\x00\xff\xff\xc8\xe4\x9f\xe6\x3d\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 573, mode: os.FileMode(420), modTime: time.Unix(1486464625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x1a\xdd\x52\xdb\xca\xf9\x9e\xa7\xd8\xa3\xb4\x1d\x98\x44\x12\xc6\x10\x08\xd8\x9e\x21\xe0\xd3\x84\x62\x70\xc0\x81\x9e\x73\x93\x59\x5b\x6b\x6b\xcd\x4a\x2b\xb4\x2b\xff\x24\xc3\x4c\x9f\xa0\xef\xd1\x8b\xbe\x44\xfb\x26\x7d\x92\x7e\xbb\x92\x65\x59\xb6\x6c\x41\x26\x69\x3d\x13\xa3\x5d\x7d\xbf\xfb\xfd\xaf\x53\xfb\xe5\xfc\xfa\xac\xf3\x5b\xbb\x89\x3e\x74\x5a\x97\x8d\xad\x9a\x2b\x3d\xd6\xd8\x82\xbf\x04\x3b\x8d\x2d\x04\x9f\x9a\x47\x24\x46\xae\x94\x81\x49\x1e\x23\x3a\xaa\x1b\x67\xdc\x97\xc4\x97\x66\x67\x1a\x10\x03\xf5\xe2\x55\xdd\x90\x64\x22\x6d\x85\x7f\x82\x7a\x2e\x0e\x05\x91\xf5\xcf\x9d\x5f\xcd\x23\x03\xd9\x09\x25\x49\x25\x23\x8d\x56\x8b\xf7\x1e\x10\x10\x11\x9c\x91\x9a\x1d\x6f\xc6\x00\xa2\x17\xd2\x40\x22\x11\xf6\xea\x86\xe2\x28\x8e\x6d\xbb\xc7\x1d\x62\x0d\x1f\x23\x12\x4e\xad\x1e\xf7\xec\xf8\xd1\xdc\xb3\x2a\xd6\xbe\xe5\x51\xdf\x1a\x0a\xa3\x51\xb3\x63\xd4\x75\x74\x1c\x7f\x28\xac\x1e\xe3\x91\xd3\x67\x38\x24\x9a\x18\x1e\xe2\x89\xcd\x68\x57\xd8\x2e\xf6\x1d\x46\xba\x20\x37\x10\xb4\xf7\xac\x5d\x6b\x77\x71\x2f\xcb\x24\xe6\xc2\xa8\xff\x80\x42\xc2\xea\x86\x90\x53\x46\x84\x4b\x88\x34\x90\x1b\x92\xfe\x9c\xab\x87\x27\xc0\xd8\xea\x72\x2e\x85\x0c\x71\xa0\x16\x8a\x71\xba\x61\x57\xad\xaa\xf5\xd6\xee\x09\x31\xdf\xd3\x6a\xc1\x8e\x81\x28\x9c\xed\x20\xa4\x72\x0a\x3c\x5c\x5c\x3d\xda\x37\x2b\x8f\x47\x5e\xe7\xe2\xfa\xf4\x76\x72\x34\xac\x9c\x46\xaf\xf1\xc1\xfd\xf9\x9d\xdf\xa6\x7b\xec\xe1\xd7\xfe\x78\xdc\x3c\xc5\x47\xee\xf9\xb9\x33\xfc\x9d\x05\x97\x64\x30\x71\x87\x77\xad\x66\xa5\x3f\x18\xde\xb7\xff\xec\x3d\x7c\x15\x87\x60\xb0\x90\x0b\xc1\x43\x3a\xa0\x7e\xdd\xc0\x3e\xf7\xa7\x1e\x8f\x40\xbd\x1f\xac\x94\x29\x5d\xe2\x91\x75\xaa\xf5\x2f\xef\xf7\xae\x76\x2b\xac\xf5\x38\xc4\x0f\xef\x1f\x26\x55\x66\xb7\xde\x35\xb1\x1b\x8d\x83\xdb\x3e\xb9\x1a\xdd\xbd\xad\x5e\x1c\x90\xaf\x7e\x35\xfa\xfd\x2b\x0e\x3a\xbb\xd1\x61\xf3\x37\xf1\xd7\xd6\xf0\xd3\xdd\xeb\xdd\xa6\x7f\x10\x6e\x52\x6d\x95\x57\x94\x55\x65\x98\x37\xcf\x70\xa5\x0a\xbb\xde\x6d\xf7\xe2\xbc\xf9\x81\x62\xd6\xf7\xa2\xf7\xef\x3f\xb5\xdf\x9e\xee\x7f\x0a\x83\xf0\xf1\xe0\xfa\xae\x7f\x5f\x3d\x6c\xdf\xdc\x54\x87\x07\xcd\xcb\xc7\x89\x10\x95\xe9\xdd\xe3\xb5\xf4\x49\xe0\x7f\xb8\x6b\xbf\xc3\x17\x87\x93\xdb\x62\x15\x56\x3a\xdf\xa2\x59\x36\x78\x78\x2a\x7f\xd5\x74\x40\x3e\x3e\xb0\x2b\x56\x75\xdf\x7a\x97\x33\x53\xfc\x6e\x6e\xa7\x25\x5f\x90\x10\xf6\x49\xb4\x2b\x80\x97\x87\x5c\xa1\x40\xc3\x02\x79\x56\x05\x61\xc2\x37\x23\xd4\x05\x1e\xe1\x5b\xbd\x6b\xc4\xe2\x00\xb9\x48\x52\xb6\x26\x51\x6c\xc0\x0e\x21\xf1\x11\x21\xbf\x80\x1c\x03\x12\xbe\x9c\x8e\x87\x83\x80\xfa\x83\x55\x04\x56\x87\x5d\xee\xa8\x13\x7b\x2b\x7b\x69\x28\x2b\x73\xfe\x3a\x4b\xfb\xd8\x03\xf8\x11\x25\xe3\x80\x87\x32\x93\x9b\xc7\xd4\x91\x6e\xdd\x21\x23\xda\x23\xa6\x5e\xbc\x01\xef\xa5\x12\xce\xd6\x14\x3d\xcc\x48\xbd\x62\x94\x51\x25\x86\x51\x9f\x3f\x6c\x23\x87\xf7\x22\x0f\xc8\xa3\x1d\x2b\x84\x72\x31\xdd\xee\x47\x7e\x4f\x52\xee\x6f\xef\xa0\x6f\x28\x85\x54\x9f\x85\xc5\x08\x87\x28\x39\xd2\x4b\x7d\xa2\xa8\x8e\x7c\x32\x46\x37\xd9\xbd\xed\x9d\x93\x65\xac\xb1\x48\x40\xef\x49\xf7\x16\xaa\x08\x91\xdb\xc6\x58\x79\x9a\x81\x5e\x23\xc6\x7b\x58\x71\xb7\x5c\x2e\x24\xac\x0d\x9b\xf4\x5c\x6e\xec\x9c\x2c\x90\x19\x0b\x8b\xfb\x1e\x11\x02\x0f\x08\x10\x4b\x45\x26\x23\xd0\x64\x49\xee\x19\xe3\x39\xc2\xc5\xed\xf5\x95\x15\xa8\xf2\x16\xa3\x58\x0e\x96\x38\xc7\x43\x7d\x16\x14\xb4\xc0\x73\x9a\xbe\x0c\xa7\xdb\x09\xa1\x1c\xc2\xd3\xc9\xd6\xd6\x92\xb2\x89\xb7\x24\x1a\xb7\xe2\xd5\xb6\xf1\xea\x55\xeb\xfa\xec\x2f\x5f\x6e\x9b\x37\x77\xcd\x9b\x2f\xcd\xab\xf3\xf6\xf5\xc7\xab\xce\xab\x57\x79\x45\x67\xce\xd6\xa7\x8c\x5d\x52\x21\xb7\x77\xd2\xd7\x4f\x00\x1a\x1b\x3b\x75\xc2\x9a\x1d\x57\xfc\xad\x5a\x97\x3b\xd3\xc4\x15\xdc\x30\x79\x70\xe8\x08\xf5\x18\x16\x02\x9c\x0f\x5c\x0a\x53\x9f\x84\x66\x9f\x45\xd4\xc9\x78\x44\xcd\xad\xe4\x6b\x3b\xec\xcc\x5f\x67\x88\x84\x7c\x9c\x41\xd4\x6f\xb1\xa0\x0e\x99\x33\x61\xa6\xe7\x98\x7b\x28\xc0\x8e\x09\xb9\xd0\x95\xe6\x6e\x0e\x41\x23\x45\x6c\x86\xe1\xe3\x11\x78\xff\xc8\x0c\x40\x5b\xa1\x9f\x84\xc4\xe0\x20\xce\x0a\x34\x8d\xca\xe8\x0c\x15\x83\x03\x8c\x08\x44\x24\x46\xca\x96\xa6\x04\x93\x31\xe5\xfb\xb8\x3b\x8b\xb8\x57\x89\x35\x8d\x46\xe2\xa3\xa2\x66\xe3\x02\xc2\x90\xdb\x0a\x59\xae\xe5\x91\x18\xcc\x68\x24\xa6\x7e\x39\x8b\x98\xe0\x10\xc2\x36\x36\xef\xf1\x89\xb1\xc8\xd6\xe3\x0e\x66\xb3\x3d\x1c\x0e\xa0\x55\x03\xfe\xd3\x96\xde\x6e\x9c\x76\x79\x24\x9f\xc9\xbd\x66\x47\x2c\x67\x51\x5b\x9b\x34\xb7\xb9\xe0\x49\xda\xc8\x15\x65\xd9\x65\x7a\x19\x40\x38\x24\x33\xc9\x64\x45\xd6\xfc\xc5\x34\x3b\xb8\x8b\x2a\xa6\x59\x00\xa0\xc8\x51\x07\x3c\x2f\x31\x64\x96\x76\x80\x7d\x82\xfa\x18\xdc\x8f\xfa\x68\xe6\x0d\x2b\xc9\xcc\x78\x51\xbf\xcb\x27\x48\x72\xce\xa0\x39\x2c\xe2\x99\x57\x63\xd9\xe9\xd7\x41\xab\xd3\x99\x08\xb3\xb2\xb7\x01\x27\x8f\x17\x44\x8c\xc5\x21\x53\x02\x51\x23\xe3\x19\x6a\x57\xfa\x08\xfe\x99\x0e\xe9\xe3\x88\x49\xfd\x3c\x81\xaa\xa3\x3b\xf4\xba\x71\x43\xfa\x21\x14\x26\x43\x9f\x23\xbc\x3b\x63\x04\x87\x90\xdf\x4a\xf0\xd1\xa0\xeb\x55\x2f\x72\xb7\x45\x20\x50\x74\xc3\x11\x96\x00\x01\x03\xda\xea\x78\xd7\xd8\x4d\xc3\xad\xb2\x06\x12\x01\xee\x91\xf0\x40\x15\xf0\xb5\x9c\x36\xbd\x56\x42\x80\x47\xac\x75\x1e\x05\xf3\x22\x57\x53\x1e\xcd\x90\xfe\x4e\xad\x39\x2f\x48\x46\x36\x12\x60\xdd\x56\x70\x9b\x5c\x13\x64\x99\x15\x41\x06\xd5\xa4\xd4\xe1\x65\xd8\x98\x2a\xd7\x64\xa3\x8e\x11\x13\xbc\x29\x80\x4a\xb1\x3e\xdc\x52\x82\x1a\x67\x81\xa4\xde\x59\xa4\x89\x62\xca\x2e\x1f\x11\xd5\x63\x68\x87\x35\xd3\x92\x85\x74\x70\x38\x7c\xec\x43\x4f\xa6\x1a\xa8\x99\x24\x0c\x4f\x21\xe5\x1d\xa3\x3e\x9d\x10\x27\x2e\xa3\x63\x1e\x3a\xe6\x18\x1a\xd0\x63\xd4\x85\xee\xe6\xc1\x54\x1b\x27\x65\x63\x4a\xaa\x6a\x3a\x93\xcc\xa5\x8e\x43\x74\x28\x95\xc3\x8e\x29\x84\xe5\x81\x13\x96\x59\x67\x15\x9e\x59\x05\x1f\x85\x16\x9a\xfb\x83\xc6\x39\x96\x50\x8d\x93\xc5\xf3\xc8\xda\xd2\xfd\x5e\x41\x2a\x73\x41\xce\x60\x98\xff\xbf\x10\xa4\x45\xa4\xcb\x9d\xff\x9d\x28\x87\x73\x51\xda\x58\xba\x3f\x43\x10\x80\x2e\xe9\x53\x8a\x6e\x7a\xff\xb3\x11\x58\xce\x3b\xc6\x12\x84\xcb\x01\x03\xa0\x0a\xcc\xef\xca\xf5\x65\x32\x70\x9c\x5d\xe3\x44\x59\x32\xb7\x8e\x09\x63\x48\x7d\x99\x02\xa9\xf1\x68\x56\x6c\x6b\xc4\x6b\x5c\x62\x91\x26\x5a\x14\x05\x90\xf3\x88\x73\x0c\x23\x15\x30\xd0\x99\x0b\x28\xc8\x2f\xc9\xbe\xd1\xb8\xc7\x30\x80\x41\x87\x6e\x59\x60\x7e\x00\x81\x92\x02\x34\x5e\xa2\xcf\xba\x57\xa0\x26\x52\xbd\xd1\xde\xc6\xde\x68\xd6\x80\xae\xec\x8d\x36\x74\x44\x1b\x6b\x59\x8e\xc9\x77\xd5\x83\x4c\x2d\x98\x91\x2b\xae\x05\x10\x58\x34\x20\x4e\xb6\x32\x94\x2a\x37\xcf\x89\x80\x67\xe4\x6a\x95\x0a\xe2\x69\xdc\xa8\xee\xfe\xd1\x68\x7c\x0e\xe9\x33\xc3\x78\x4e\xe0\xad\x22\x70\x4e\xe2\x26\x1f\x86\xd8\x67\x13\x6a\xfc\x48\x8c\x72\xf9\x26\xcd\x35\x25\x4c\x52\x2e\x77\x94\x61\xb9\x99\xd2\xc6\x0c\xf4\x82\x70\x5c\xb1\x9f\xdb\xca\x2c\x93\xc7\xf8\x59\x05\xb1\x9e\xce\x90\x1e\xce\x66\x91\x96\xcd\x4b\x7a\xa6\x8b\x43\x35\x8e\x8c\x64\x9c\x43\x21\x57\x8d\x4e\x7c\x8d\x66\xac\x9e\xc7\x35\x6e\x72\xd3\x86\xe2\x85\xf0\xf2\x13\xfa\x12\x7c\xf1\x4c\xb6\x0c\xab\x6c\x5c\x18\x78\xb5\x6e\x24\x25\xf7\x93\x3b\xa7\x78\x91\xc6\x72\x8f\x71\x41\x92\x59\xd5\xa1\xc2\xa3\x29\x51\xa3\xf1\x27\x49\xa1\x29\x3d\xa9\xd9\x31\x4e\x01\x75\x77\x7f\x51\x16\x3d\xcf\x18\xc9\x5d\xc5\x3d\xe9\x66\xee\x2b\xf6\x57\x4d\xb6\x2b\x8d\xb9\xac\xa2\xf2\xa9\x22\x05\x83\x46\xcb\x53\xdc\xa8\x40\x50\x0a\x3e\x74\x3a\x6d\xa4\xd6\xea\x7a\x07\x12\x18\xa3\xf1\xcd\x15\xea\xf3\x10\x6a\x8a\x90\x7a\xdf\x77\xc0\x9a\x50\x47\x82\x90\x4b\x0e\x47\xa3\xaf\x04\x82\x42\x06\x97\xb4\x47\xfc\x1e\x01\x65\x82\xa9\x2e\x49\xe8\x5f\xff\xf8\xcf\xdf\xfe\x8e\xf6\x76\x2b\x87\x6f\xd0\x05\x74\xaf\x14\xb5\x70\x28\xff\xfd\x4f\x1f\x6d\xa7\x97\x04\xea\xaa\xf6\xd8\xb6\x87\xea\xb5\x45\x39\x0c\x7b\xc9\x75\xc0\x97\x2e\xc3\xfe\x83\xd1\xc8\x01\xa8\x39\x6d\x67\x9d\x18\x37\x04\x66\x3d\x01\xf9\x36\xf2\xc1\xe0\xa8\xf5\xb1\x03\xf3\x02\x48\x26\xc8\x1b\x24\x08\x41\x0b\x9c\xd5\xd5\xdd\x80\x4a\x37\xea\xc6\x3f\xed\x78\x20\x1f\xf5\x8f\xf6\x6c\x4f\x9d\x8e\xdd\x65\xbc\x6b\x7b\x70\x06\x24\xb4\x2f\x3f\x9e\x35\xaf\x6e\x9b\x96\xe7\x2c\xcb\x98\xbc\x5b\x73\x65\x11\x34\xf4\xd9\x3a\x04\x06\x01\x26\x2c\x65\x71\x28\x0b\xe0\x35\xe4\xf8\x39\x12\xad\x3e\x9e\xf5\x38\x2b\xa5\x2a\xed\x54\x7d\xce\xe5\xcb\xe2\x26\x37\xcd\x17\x44\xd0\x99\x8a\xae\xe2\xf8\xf9\xbe\x8c\xd5\x69\xb6\xda\x97\xa7\x9d\xe6\x2d\x4a\x13\x56\x72\xbb\x9c\x1d\xe3\x88\xba\x18\x5d\xb8\xeb\x9e\x98\xf3\x5f\xde\x4c\x49\xbc\x80\x41\xc3\x94\xbd\x25\x82\x8a\x3b\x4f\x0f\xb4\xf7\xa0\xcb\xfd\xb7\x6f\xb3\x7b\x7a\xe8\xb1\x79\xf8\xf4\x94\xbb\xe0\x4a\x27\xd1\xd8\x09\xcc\x39\xbc\x1f\x79\x00\x9d\x53\x53\x3a\xcb\xf3\xd4\x1c\x45\xb5\x70\x4f\x4f\x50\x24\x9c\x4d\x68\x6a\xe8\xe8\x36\xb2\xc2\x39\x1a\xb3\x9b\x3f\xd6\x52\xa4\xe6\x74\x3c\x3d\xc1\x94\x93\xe1\x30\x8b\x18\xc0\xbc\x91\x47\x5b\xac\xd5\xea\x78\x17\x66\xf7\x82\x13\x9b\x71\x11\x10\xf3\x3d\x68\x84\xf9\x38\x9d\xab\xc1\xcf\xc0\x6a\xd3\x63\xe4\x73\x3f\xdf\xce\x69\xf9\x38\x53\x2d\x6f\xdd\xd8\x2f\x2a\x1f\x09\xa1\x00\x3b\x0e\x64\xbe\x63\xb4\x1b\x4c\x50\xe5\x20\xfb\x55\x14\x15\x6e\x15\x9a\x22\x2d\x31\x64\xf4\x6a\x31\x50\xdc\x97\x27\x3a\x30\xdc\x25\x0c\xe9\x6f\x33\x08\x29\xc4\xf0\x34\xbd\xed\x4d\xdb\xf3\x42\x6a\xeb\x27\x8d\x20\x4c\x6f\xb6\xe1\xd1\x84\x18\xe0\x8c\xe9\x86\xb5\x51\x53\xee\x00\xc6\x99\x9d\xec\x93\xb2\x8c\xde\x83\xa4\x15\x16\xb4\x1f\xeb\x5a\x8f\x75\x7a\x2d\x47\x08\x68\xa8\x7b\x6e\xf2\x73\x54\x8c\x79\xfd\x50\x1d\x67\xe9\xae\x71\xc9\x07\x3f\x45\x29\x68\x99\x9e\xa3\x50\xb9\x14\xbb\x3a\x36\x33\xbf\x7d\x2e\x65\xd3\xd9\x20\x54\x3e\x9b\xa6\xf4\xf3\x6d\x3a\xc4\x67\x9c\xb2\xbe\x7d\xbe\xf9\xf8\x14\xe7\xaa\x95\x59\x46\x81\x38\xf3\xf1\xe3\xa9\x20\x19\x35\x36\x5d\x31\xeb\x3f\xea\x57\x4b\x33\x1d\x41\x75\xe6\x8e\x42\x5a\x37\x12\x29\x8c\xc6\x1d\x00\xa8\x62\xfa\x1d\x3c\x88\x43\xe5\x5a\x1e\x4d\x00\x58\xe6\xb1\xda\x02\x70\x2c\x7a\x8a\x50\xbf\x9d\xa9\xff\x35\xf3\xdf\x00\x00\x00\xff\xff\xa2\x75\x4b\xf9\x4c\x23\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 9036, mode: os.FileMode(420), modTime: time.Unix(1492724785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsMappingJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xdd\x6e\xdb\x3c\x0c\xbd\xef\x53\x08\xfa\xfa\xc1\x36\x9a\xd8\x19\xb6\x2b\xa7\xe9\xc5\x7e\x80\x62\xd8\x1f\xd0\xee\xaa\x2d\x06\xc5\x56\x62\xb5\x8a\x64\x58\x74\x9a\x60\xf0\xbb\x8f\x72\xac\xd4\x8d\x9d\x34\xc3\x4a\xc0\x80\x2c\x91\x3c\x3c\x3c\x94\x66\xa5\x4a\x40\x68\x45\xbe\xb2\x3c\x17\x6a\xee\xa7\x7a\xc1\x84\x0a\xc8\xef\x93\x13\x82\x06\x99\x30\xe1\x66\x8f\x4c\xc8\x66\x51\x1f\x44\x51\xa2\x17\xb9\x90\x1c\x5d\xf0\xe3\x8b\x5c\x32\xe0\xf5\xd1\x92\x15\x64\xb1\x49\xf7\xcb\xe8\xb2\x48\x38\x86\x9e\xfa\xf4\xbf\x66\x73\xc8\x15\x14\x6b\x1a\x84\x19\x2c\xa4\x1f\x8c\x3b\x41\x2e\x1b\x86\x5d\x32\x95\x4a\x3e\x65\x85\x09\x1b\x3c\xff\x79\x6a\x0c\xdf\xc6\xcf\x84\x94\x5f\x84\x01\x8c\x73\xbc\x7c\xcb\x84\x34\x76\x1a\xce\x39\x7c\xbe\xfa\xfe\xcd\xa7\x19\x40\x1e\x47\x11\x25\x67\x0d\x29\x5c\xd0\x88\xe5\x22\x6a\xd2\xd3\xc1\x53\x8e\x94\x01\x6b\xe7\x71\x78\x02\x0b\x35\x08\x76\x73\x37\x7e\x76\xd6\xe6\x0a\x6c\x6a\x7b\x34\xd5\xa9\x65\x8c\xc4\x60\xed\x28\x3f\x95\xc5\x59\x92\xd5\x28\x2d\xd0\x07\xbe\x1e\xb8\x8e\xec\x82\xbb\x02\x6c\x03\x11\x7f\xb7\x6f\xae\x45\x3b\x38\x87\x4b\xc3\x4d\xae\x52\xdf\xa6\xdc\x89\xab\x5a\xff\x95\xeb\x77\x35\x6e\x0d\x48\xbb\xf1\xcd\xb2\x39\x3e\xf5\xbd\x2d\x9e\x25\xe8\x05\x21\x72\xf3\x12\x29\x92\x07\x6f\x40\xbc\x70\x0a\x6a\xb8\x14\xfc\x71\xd8\x78\x79\x83\x7e\xed\x2c\xdd\xb2\x10\xf5\x24\x59\xcc\x20\xb4\xe9\x7c\x8a\x7b\xb4\x55\xdf\xdf\x48\x5c\x1f\x61\xfc\x0b\x4a\x27\x5a\x01\x4e\x2c\x22\xdb\xbc\xa1\x81\x02\x63\xc5\x6c\xdd\x08\xa6\x4a\x29\x07\xe4\x5d\xf0\x2c\xe6\xbd\xd6\x80\x8e\x2c\xff\x28\x98\xd4\xf3\xd0\x64\xfa\xd1\xef\x6a\x08\x02\x24\x8f\x89\xd7\x5c\x3e\x92\xf2\x99\x50\xc2\x56\xe2\x0d\x3a\xce\x0b\x6e\x0c\x9b\xa3\x3b\x3d\x4f\xc5\x92\x24\x92\x19\x33\xb9\xa5\x79\xc1\x6f\xe9\x85\xa5\x62\xd6\x0a\xd8\xea\x52\xcc\x33\x89\x1f\xf8\x4d\xe1\x81\xe5\x7d\x1e\x61\xcc\x05\x3d\xa8\xeb\x56\xdf\xe3\x95\xe3\xa9\x80\x57\x52\xce\xba\xe1\x00\xe6\x5a\xd4\xbd\x3e\x5e\xbe\x3e\xf1\x5d\xa2\x7f\x91\xf6\x55\x14\xb5\x0d\x3a\xac\x25\xf0\x15\xb0\x82\x33\x22\xd2\x89\x67\x7f\x86\x65\x8e\xf0\x7c\xdb\x56\x62\x60\x2d\xf9\xc4\x5b\x08\x35\x7c\x14\x29\x64\xf1\x9b\xd1\xe8\xff\x71\xc6\xad\xc8\xf1\xdb\xd1\x28\x5f\x79\xb5\xfe\x8e\x4d\x2d\xb7\x4b\x7b\x41\xbb\xe8\xd3\x12\x40\x2b\x13\x93\x9b\x2e\x01\x6b\x92\x4d\xb9\x44\x12\x1f\x98\x4a\xb8\xec\x29\xdf\x1a\xab\xdb\x1a\xb7\x1a\x5c\x37\xa6\xef\xa9\x72\xb6\xf1\x08\x13\xa9\x0d\xdf\x7d\x04\x9d\x55\x9d\xdd\x6a\xb0\x27\xa5\x2b\xf3\x8a\x2d\xf9\xab\x15\x69\xc7\xf0\x69\x2c\xec\x25\xe8\xd3\x24\x08\x97\x4c\xee\xa3\x40\xec\x24\xb2\x7b\xb6\xea\x99\x8f\xb6\xc1\x3a\xb7\xa3\xf2\xe3\xe7\xf5\x9e\xea\x9d\x95\x05\xd2\xdc\x8e\xf4\x41\x57\x3b\xb8\xb1\x23\x70\xd8\xd5\x94\x49\x82\x63\x18\x77\xae\x48\x47\xa8\xed\xa3\x8e\xf7\xba\x3a\x9c\x94\x17\x85\x2e\x7a\x52\x32\xc9\x0b\xf0\xe9\xa7\xcd\x31\x3d\xeb\xbb\x6f\x08\xb4\x0b\xfc\x02\x5a\xc3\xf3\xba\x6e\x24\x45\x6d\xf0\x71\x62\x16\x37\xba\x37\x5a\xf5\x4c\xfe\x6e\xab\x36\x91\x9e\xf5\xf6\xf6\x3a\x57\xc7\x8f\xea\xdd\x91\x0f\x2c\x5a\xf5\x27\x00\x00\xff\xff\xef\x33\x97\xf0\x7b\x09\x00\x00")

func tmplJsMappingJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsMappingJs,
		"tmpl/js/mapping.js",
	)
}

func tmplJsMappingJs() (*asset, error) {
	bytes, err := tmplJsMappingJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/mapping.js", size: 2427, mode: os.FileMode(420), modTime: time.Unix(1492725299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsRequest_loggerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5d\x4f\xdb\x4a\x10\x7d\xcf\xaf\x58\x0c\x52\xd6\x37\xb9\x26\x5c\xf1\xe4\x28\xd2\x55\xd3\x54\xa8\x22\x54\x25\x54\x55\x9f\xd0\xc6\x9e\x24\x16\xf6\xae\xbb\x3b\x2e\x44\x90\xff\xde\x59\x7f\xc4\x1f\x24\x80\xa5\x18\xb4\x3e\x73\x76\xf6\xcc\xf1\x8c\x57\x99\x0c\x30\x52\x92\xdd\xc2\xef\x0c\x0c\x5e\xab\xf5\x1a\x34\x77\xd9\x73\x8f\xd1\x75\x7e\x1e\xa8\x24\x8d\x62\x60\xb8\xa1\x1f\x24\x69\x2c\x10\xf2\x47\x7f\x84\x66\x46\x65\x3a\x00\x36\x61\x67\xdc\x39\xd5\x05\xc3\xbf\x20\x51\x6f\x1d\xd7\xdb\x60\x12\x73\x77\xbc\x07\x57\xd1\x04\xbf\x12\x32\x8c\x61\x29\xb4\xf1\x4a\x7e\x5e\x50\x11\x3c\xc7\xe3\x26\x32\x9e\xcc\x12\xc2\x8e\x8a\x95\x7d\xa2\x6b\xc0\xa9\x8a\x95\xfe\xb4\x5d\xa0\xc0\xcc\x70\x93\xff\x99\xaa\x10\xaa\xac\xed\x15\xad\x58\xe3\x09\x9b\x4c\x26\xec\xbf\xd1\x88\xbd\xbc\xb0\x57\xab\x17\xcd\x38\x7b\x69\xc0\x4c\x4b\xe6\x98\x2c\x08\xc0\x18\x67\xbc\x7f\xba\x63\x10\x1b\x38\x44\x7e\x39\xba\x3c\x46\x13\x0a\x49\x9a\xbe\x66\x39\x8c\x7e\x14\x5a\x46\x72\xdd\x84\xf7\x8a\x7b\x5b\x87\x2c\x0d\x49\xcc\xbb\x08\x49\xbc\xe6\xce\x67\x3c\x54\x41\x96\x50\x15\x5c\x4f\x20\x6a\xee\xa0\xc5\x38\x43\xe6\xdc\xcc\x7e\xb2\xdb\xd9\xf7\x1f\xb3\xc5\xdd\xc9\x89\xe3\xd6\x3b\x18\xc0\xbb\x28\x01\x95\x21\xdf\xf3\x5b\xd2\xb7\xc8\xe6\x73\x15\x3c\xb0\xa9\x92\x46\xd1\x82\x3b\x66\xbb\xa1\x55\x78\x54\xd2\x76\xd3\xa5\xb2\x95\x16\xb3\x3b\x71\xa4\x1b\x29\x98\xa4\xcd\xd4\xad\x4b\x74\x0d\xa2\xe2\x4b\x78\x64\x9f\xe9\x98\x35\xfe\x9f\x8b\x7a\x8f\x2a\xc6\x0a\x81\x45\x40\x23\xdc\xa3\x2d\xf3\x58\x97\x0d\x98\x73\xee\xb0\x41\x4b\x6f\xde\x81\xce\x95\xc4\x4d\x8e\xbd\x38\x1c\xd0\xc1\x7f\xc9\xe2\xf8\x17\x08\x5d\xd0\xb3\xff\xd9\x3b\xf8\x2b\x32\xb8\x29\xc0\xfe\x3b\xd0\x79\x24\x33\x84\x0f\x82\x17\x10\x28\x19\x1a\xde\xd0\xa4\xb4\x52\x25\xcb\xe1\x82\x14\xfe\xb9\x16\xa6\xaa\x4b\x5b\xe7\xb6\xa5\xfa\xa7\x31\x01\xef\x8b\x98\xb0\xef\x7a\x08\x4f\xc8\x8f\xd6\xf4\xb8\x07\xc8\x2f\x79\x28\xbd\xdb\x43\x9b\xa0\xe8\xd6\xbf\x78\xad\xa8\x92\xf6\xa1\xa7\xc1\xa4\xe4\x30\xf0\xea\xb7\xad\x5d\xfa\x04\x70\xa3\xc2\x1a\x9e\x67\xe3\x15\xab\x6d\x64\x2a\x70\xd3\xc5\xd9\xb5\xf1\x21\xfb\x11\xd0\x6c\x25\x8a\xa7\xab\x68\xbd\x89\xe9\x87\xfc\xeb\xe2\xdb\x0d\xa5\xa1\xe9\xdd\x8c\x56\x5b\xde\xe4\x19\xb2\x4c\x86\xb0\x8a\x24\x84\x43\x76\xe9\xba\x5d\xca\xe2\x0c\x1f\xe6\x2c\xe0\x6f\x93\xc6\x6a\xfd\x71\xbe\x2c\x7e\x27\xc5\xc0\x36\x54\xe2\x3b\xd2\x5b\xdd\x5e\xd7\x5a\xcf\x95\x50\xf7\x54\x48\x9f\xe5\xd5\x2c\x57\x7c\xb6\x57\xa5\x3a\x8a\xcf\xea\x43\x69\xca\xdc\xb7\xe9\xef\x03\xee\xad\xa7\xfc\x6e\x83\xc8\x73\xb7\x8e\x72\x6b\x60\x40\xe5\xf7\x4b\x87\xd4\xab\x45\xb1\xfd\xd2\x0a\xf5\xba\x2d\xae\x9f\x97\xbd\xc9\x40\xa7\xf3\xcb\xf3\xee\x5a\x2e\xcd\x47\x0e\xe5\x35\xb3\xe3\x8b\xb4\xa8\x1b\x61\xd7\xa6\xd5\x70\x1a\x0c\xba\x2a\xe6\xde\xae\x74\x2c\x8c\x5e\x81\x4b\xb7\xb7\x23\xec\x88\x24\x78\x35\x19\x79\xc9\xd0\x40\x35\x07\x2b\x8a\xa5\x1d\xc4\x4b\x15\xda\xf1\x9a\x6a\x48\x41\x86\xdc\x72\x34\x02\x5a\x63\xa1\xbb\xdc\x7d\xdb\x6b\x91\xcb\xb9\x4b\x92\x90\x1c\xcd\xae\xaf\x41\x84\xdb\xf6\x54\xe8\x55\x89\x2d\x51\x4e\x63\x6a\x81\xf4\xd1\x40\x09\x05\x71\x14\x3c\x1c\x40\xbe\x7d\x0c\x3a\x3a\x6e\xab\x4c\x77\x55\x1e\xb6\xe3\x54\x78\x9b\x24\x75\x1c\x25\x79\x3f\xdf\xa2\x3f\x64\xfd\x92\x43\xd3\xff\x87\x37\xb4\xea\x46\x61\xfe\x65\x62\x2b\xe0\x7a\x96\x85\xa6\x97\xd0\x54\x1b\xa7\x23\x30\x75\x58\x02\x53\x53\xa3\x8f\x9f\x5a\xb6\x3c\x99\x9e\xbd\xff\x0d\x00\x00\xff\xff\x48\xc9\xb9\x31\x25\x09\x00\x00")

func tmplJsRequest_loggerJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsRequest_loggerJs,
		"tmpl/js/request_logger.js",
	)
}

func tmplJsRequest_loggerJs() (*asset, error) {
	bytes, err := tmplJsRequest_loggerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/request_logger.js", size: 2341, mode: os.FileMode(420), modTime: time.Unix(1492696553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsUtilJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcb\x6e\xea\x30\x10\x86\xf7\x3c\x85\x15\x1d\x61\x9b\x9c\x90\x2e\xba\x29\xb7\xa8\x8b\x4a\x7d\x86\xc6\x41\x72\x82\x09\x69\x8d\x83\x7c\xa9\x4a\x49\xde\xbd\x76\xb0\xb8\x44\xa8\x74\x24\x44\x66\xfc\xcf\xf7\xcf\x24\x06\x36\xd6\x46\x14\xba\xaa\x05\x50\x7b\xa1\xe9\xd7\x6b\x55\x6e\xb8\xfd\x69\xf4\xae\x6a\x81\xc1\x61\x00\x7c\xb8\x1c\xcc\xbb\xbf\xb1\x64\x3b\x4e\x0b\x86\xe2\x61\x5c\xfe\x07\x70\x48\xb7\xbb\x29\xc4\xe7\xf2\xec\x58\xe6\xfa\xaa\xba\x38\x56\x4b\x57\x9d\x9e\xb8\x92\x69\x23\x45\x8f\x8b\x02\x44\x88\x49\x69\xf4\xfd\x1c\xbd\x3d\x44\x4f\xd9\xe1\xb1\x6d\x08\x49\x97\x26\x6b\xd2\x25\x21\x41\x86\x47\x56\xa2\x46\x13\x9c\x34\x24\x47\x5a\x1a\xd6\xac\x29\x57\xac\x11\x86\x73\x4c\xf2\x26\x4a\xc8\x2a\x44\xc9\x84\x8c\xc9\x6a\x84\x13\xfb\x94\xb2\x97\x2c\x0d\x49\x94\xb9\x13\x9c\x60\x37\xce\x69\x7d\xb4\xa5\xba\xd8\x5c\x2e\xec\xe2\x93\x4a\x50\x70\x65\xf7\x86\xc2\x6c\x73\x26\xe1\xf4\xea\xbc\x5a\x03\x14\x2f\x83\x78\xac\x99\xd2\x1e\xd1\x67\x9c\x74\x93\x7f\x77\x75\x2e\xbc\xdf\x07\xdb\xf7\xcc\x5c\xb4\x80\xd9\x25\x7f\xef\x54\x5a\x56\xa2\xbc\xd5\x3c\xb8\x81\xea\x46\x3b\xbf\xbf\xbb\x23\x7a\x93\xbc\xae\x39\xa3\xa2\xe7\x72\xc9\x74\x1f\xe2\xaf\x34\xa7\xed\xa3\xae\x32\x7f\x4b\xe0\x4c\xed\xa8\xb0\x5d\x54\xa9\x79\x00\x41\xd8\x01\x42\x00\x83\x85\x4b\x3a\x1f\x97\xce\x62\xa7\x5b\x5c\x20\x5b\x7f\xe5\xda\xc1\x4f\x00\x00\x00\xff\xff\x65\x72\x26\xfc\xf6\x02\x00\x00")

func tmplJsUtilJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsUtilJs,
		"tmpl/js/util.js",
	)
}

func tmplJsUtilJs() (*asset, error) {
	bytes, err := tmplJsUtilJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/util.js", size: 758, mode: os.FileMode(420), modTime: time.Unix(1492694967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/mapping.js": tmplJsMappingJs,
	"tmpl/js/request_logger.js": tmplJsRequest_loggerJs,
	"tmpl/js/util.js": tmplJsUtilJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"mapping.js": &bintree{tmplJsMappingJs, map[string]*bintree{}},
			"request_logger.js": &bintree{tmplJsRequest_loggerJs, map[string]*bintree{}},
			"util.js": &bintree{tmplJsUtilJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

