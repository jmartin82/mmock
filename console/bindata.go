// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xcf\x6e\xa3\x30\x10\x87\xcf\xeb\xa7\xb0\x94\xeb\x82\x94\x28\xd2\xae\x8c\xb4\x52\xb6\x6d\x5e\xa3\xf2\x9f\x01\x2c\x26\x1e\x34\x38\x4d\xa2\x28\xef\xde\x81\xd0\xa6\x87\x52\x2e\xc0\xef\x1b\x7f\xe3\x19\x63\x8a\x13\xb8\x2e\xe6\x62\xf0\x4c\x88\xce\xb2\xbe\x2a\x2d\xcf\x29\x86\xdc\x1a\xbd\xde\xf4\xe7\x4a\xdd\xd4\x37\x85\x45\x66\xeb\xbb\xb9\xdc\xc9\x67\xc3\x74\x4c\xa1\xf0\x84\xc4\x46\xaf\x9e\x76\x2f\xdb\xfd\xae\xba\x63\xe2\x00\x5c\x20\xd4\x59\x9c\xfd\x59\x0f\x84\x31\xe8\x95\xf7\x7e\xd1\xde\x1e\x0f\x6e\xd9\xbe\xdd\xfc\x75\xde\xfe\x78\xd8\xb4\xf4\x06\xbc\xac\x58\x3f\xff\xd9\xfe\xdf\x8f\x0a\xa5\xca\x01\x10\x7c\x86\xf0\xca\x74\xd2\x57\x5d\x53\xca\xa2\x8d\x4d\x2b\x17\x76\x84\xa1\xba\x49\x4d\xe6\x98\x1a\xa1\xb3\xa1\x61\x80\x54\x69\x21\x49\xda\x8d\xad\x3e\x48\xb0\xdc\x11\xdb\xd4\xc0\x84\x1d\x11\x82\x4d\x0f\xee\xf0\x08\xf3\x41\xc4\x47\x7c\xb0\x0d\xa4\x6c\x27\xd2\xc1\xe5\x01\x18\xc2\x18\xaa\x6c\x1d\x82\x2e\x25\x45\xdb\x0f\x50\x46\x71\xaa\x5f\x21\x0e\x3d\xda\x8b\x99\x68\x21\x03\x4c\x33\x95\xf7\xdf\xfb\x12\xfe\xe9\xec\x28\x5c\xc6\x37\xcf\xb3\x8e\x85\xe6\x93\x86\xdf\xea\x4b\x3e\x25\xcb\x9b\xab\xeb\x5a\x5a\xbc\x07\x00\x00\xff\xff\xc8\xe4\x9f\xe6\x3d\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 573, mode: os.FileMode(420), modTime: time.Unix(1485125508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xeb\x72\xdb\xba\xf1\xff\x1c\x3f\x05\x0e\xff\xff\xe9\x38\x93\x90\xb4\xac\x38\x76\x1c\x49\x33\x8e\xad\xd3\x1c\x8f\x15\x3b\x96\x6a\xf7\x9c\x2f\x19\x88\x84\x44\xc8\x20\x41\x03\xa0\x2e\xc9\x78\xa6\x4f\xd0\xf7\xe8\x87\xbe\x44\xfb\x26\x7d\x92\x2e\x00\xde\x74\x4d\x7c\xce\x4c\x3d\x89\x44\x80\xbb\x8b\xc5\xde\x7e\xbb\x6a\xfd\x74\x71\x7d\x3e\xf8\xf5\xa6\x8b\x3e\x0e\x7a\x57\x9d\xbd\x56\xa4\x62\xd6\xd9\x83\x6f\x82\xc3\xce\x1e\x82\xbf\x56\x4c\x14\x46\x91\x52\xa9\x4b\x1e\x33\x3a\x6d\x3b\xe7\x3c\x51\x24\x51\xee\x60\x91\x12\x07\x05\x76\xd5\x76\x14\x99\x2b\x5f\xf3\xbf\x47\x41\x84\x85\x24\xaa\xfd\x97\xc1\xcf\xee\x89\x83\xfc\x5c\x92\xa2\x8a\x91\x4e\xaf\xc7\x83\x07\x04\x42\x24\x67\xa4\xe5\xdb\x4d\x4b\x20\x03\x41\x53\x85\xa4\x08\xda\x8e\x3e\x51\x9e\xfa\x7e\xc0\x43\xe2\x4d\x1e\x33\x22\x16\x5e\xc0\x63\xdf\x3e\xba\x0d\xaf\x71\xe8\x1d\x78\x31\x4d\xbc\x89\x74\x3a\x2d\xdf\xf2\x3e\x5f\x50\x4c\xc7\x02\x2b\x02\x02\x0f\xbd\xc6\xb3\xe4\x85\xc9\x44\x7a\x01\xe3\x59\x38\x62\x58\x10\x23\x14\x4f\xf0\xdc\x67\x74\x28\xfd\x08\x27\x21\x23\x43\x30\x04\x08\xf4\xb5\xae\x07\xcb\x7b\x6b\x87\xfc\xe4\xba\xe8\x0a\x54\x91\x0a\x8c\x1a\xa7\x94\x91\x10\x01\x03\x02\x9d\xe8\x88\xc2\xe2\xbc\xdf\x47\xae\x9b\x53\x33\x9a\x3c\x20\x41\x58\xdb\x91\x6a\xc1\x88\x8c\x08\x51\x0e\x8a\x04\x19\x55\x2a\xc6\x78\x0e\x5a\x7a\x43\xce\x95\x54\x02\xa7\x7a\xa1\xb5\x2c\x37\xfc\xa6\xd7\xf4\xde\xfa\x81\x94\xd5\x9e\xb1\x01\xec\x38\x88\x82\x67\xc7\x82\xaa\x05\x9c\x11\xe1\xe6\xc9\x1b\xb7\xf1\x78\x12\x0f\x2e\xaf\xcf\xfa\xf3\x93\x49\xe3\x2c\x7b\x85\x8f\xee\x2f\xee\x92\x1b\x7a\xc8\x1e\x7e\x1e\xcd\x66\xdd\x33\x7c\x12\x5d\x5c\x84\x93\xdf\x58\x7a\x45\xc6\xf3\x68\x72\xd7\xeb\x36\x46\xe3\xc9\xfd\xcd\x9f\xe3\x87\xaf\xf2\xd8\x31\xba\xeb\xbf\x40\x70\x29\xb9\xa0\x63\x9a\xb4\x1d\x9c\xf0\x64\x11\xf3\x0c\x6c\x52\x99\xe2\x3a\x55\x94\x27\x98\x21\x15\x91\x98\xfc\x0f\x2e\xee\x9a\x83\x76\x5d\x7f\x74\x75\x7f\xf8\xe9\xa0\xc1\x7a\x8f\x13\xfc\xf0\xe1\x61\xde\x64\x7e\xef\x5d\x17\x47\xd9\x2c\xed\x8f\xc8\xa7\xe9\xdd\xdb\xe6\xe5\x11\xf9\x9a\x34\xb3\xdf\xbe\xe2\x74\x70\x90\x1d\x77\x7f\x95\x7f\xed\x4d\x3e\xdf\xbd\x3a\xe8\x26\x47\xe2\x39\xd7\xdf\x19\x09\x97\x78\x8a\xfb\x36\x26\x4b\xbb\x6c\x8a\xd1\x1f\xb5\xc3\x64\xd5\xff\x93\x8d\xf7\x3f\x88\xfb\xc3\xcb\x8b\xee\x47\x8a\xd9\x28\xce\x3e\x7c\xf8\x7c\xf3\xf6\xec\xcd\x67\x91\x8a\xc7\xa3\xeb\xbb\xd1\x7d\xf3\xf8\xe6\xf6\xb6\x39\x39\xea\x5e\x3d\xce\xa5\x6c\x2c\xee\x1e\xaf\x55\x42\xd2\xe4\xe3\xdd\xcd\x3b\x7c\x79\x3c\xef\x7f\xff\xfe\x9b\xf3\x4e\x41\xa5\xc9\x0b\x4c\x75\x73\xc7\x5e\x15\x54\xb7\x54\x9b\x52\x6a\x73\xac\xd4\xc4\x19\x47\xdb\xd8\xd1\xb1\x60\xa8\x8c\xf7\xeb\xc5\x2f\xc1\x31\xd0\x4f\x29\x99\xa5\x5c\xa8\x5a\xc9\x9b\xd1\x50\x45\xed\x90\x4c\x69\x40\x5c\xb3\x78\x0d\x56\xa3\x0a\xec\xe3\xca\x00\x33\xd2\x6e\x38\x3f\x72\x93\x4e\x6e\x97\xff\xdf\x47\x21\x0f\xb2\x18\x84\xa3\x97\x9e\x80\x1a\xbc\xd8\x1f\x65\x49\xa0\x13\x61\xff\x25\xfa\x56\x9a\x0f\xa1\x29\x16\x70\x31\x28\x61\x52\x5d\xf1\xf1\x98\x08\xd4\x46\x09\x99\xa1\xdb\xfa\xde\xfe\xcb\xf7\x39\xcb\x0b\xcb\x31\x93\x39\xd9\x3d\x19\xf6\xa1\x0c\x13\xb5\xef\xcc\x74\xa0\x38\xe8\x15\x62\x3c\xc0\xfa\x24\x2f\xe2\x10\x78\xaf\x90\xe3\x93\x20\xe2\x4e\x5d\xc6\x4c\x7a\x3c\x89\x89\x94\x78\x4c\x40\x52\xa9\x1b\xa9\x94\x7b\x51\x1e\x56\xd1\x5d\xf6\xaf\x3f\x79\xa9\xc6\x84\x7d\x32\x85\xcb\x79\x21\x56\xb8\x2e\x17\xfe\x2d\x5d\xc6\x63\x7c\xdc\x4d\x94\x58\xec\xe7\x42\x5e\xbe\x7f\x61\x89\x2b\x9e\xa7\x82\xff\xa9\x92\x64\x6d\x5d\xc6\x40\xcb\xb7\x38\xb6\xd7\x1a\xf2\x70\x91\x7b\x22\x12\xf9\x43\x48\xa7\x28\x60\x58\x4a\xf0\x3d\x78\x14\xd3\x84\x88\xd2\x15\x9a\xb0\xb1\x8a\x55\xb0\x53\xbd\xae\xb1\x0b\x3e\xab\x31\x9a\xb7\x58\xd2\x90\x54\xe2\x99\x1b\x87\xee\x21\x4a\x71\xe8\x42\xd0\x47\xca\x3d\x58\x61\x30\x4c\x19\x2b\x38\x12\x3c\x85\xb0\x9b\xba\x90\xfb\x4c\x9a\x27\xa9\x30\xf8\x2b\xdc\xc0\x96\x47\x7a\xc1\x8a\xc1\x25\x53\x02\xa9\x80\xf3\xc0\x9e\x40\xa0\x59\x8b\x9c\xbe\x77\x3a\x79\x80\xc8\x96\x8f\x21\x5b\x18\xdd\x2a\x6f\x8b\x00\xa4\x7d\xe7\x2a\x70\x13\x84\xb7\x13\xf3\x10\xb3\x62\x0f\x8b\x31\x80\xbe\xf3\x7f\xf1\xa2\x67\xb6\x3b\x67\x43\x9e\xa9\xed\x07\xb5\xfc\x8c\xad\x98\xcd\x37\x76\x5b\xd9\x5c\x72\x94\xb1\x64\x63\xa3\xf9\xa0\x6c\xd2\x64\xc8\xe7\x48\x71\xce\x00\x65\x8b\xd2\xb8\x4d\xd8\xba\xdb\xb6\x1d\x39\x97\x6e\xe3\x70\x0b\xed\x2a\x7d\x9a\x31\x66\x9d\xbc\x83\xc1\x30\xe1\x82\x65\xa8\x12\x04\xff\xdd\x90\x8c\x70\xc6\x94\x79\x9e\x43\x61\x32\xbd\x51\xdb\xb9\x25\x23\x01\xb5\x0b\x2a\x72\x68\x68\xcf\x19\xc1\x02\x12\xe5\x3b\xf2\xf5\x9f\x21\xdd\xad\x05\xb8\x67\xfb\xbd\x7c\xb8\xd8\x16\x13\xed\x78\x05\x8e\xf0\xb5\xd9\x36\xd8\xdf\xbc\xdf\x64\x5d\x24\x53\x1c\x10\x71\xa4\x6b\xf8\x46\xc9\xdb\xb6\xf5\x61\xe0\xc9\x8d\xce\xd6\xef\x9e\x15\x12\x29\x4e\x08\x43\xe6\xb3\xf4\x46\x55\x99\xac\x07\xaa\xf5\x8d\xa6\xdb\x16\x42\x70\x76\x51\x01\x19\x95\x6a\xa7\x31\x6a\x62\x5d\x9d\x4b\x4e\xa1\x8f\xc2\x43\x46\x5c\xf0\x7e\x0a\x35\xc8\xa4\xf5\x76\x5f\x19\xda\x25\x51\x66\x67\x59\x16\xb2\x12\x23\x3e\x25\x1a\x40\x4c\x60\xb9\x65\xf9\x43\x26\x78\x43\x3e\x4b\x00\x5d\x35\x16\x16\x1a\x30\xbc\x80\x54\x3e\x45\x23\x3a\x27\xa1\x2d\xb7\x33\x2e\x42\x77\x06\x0d\xc3\x29\x1a\x02\x54\x3d\xb8\x7a\x03\x0a\xcc\x5e\x4b\xe9\xaa\x5b\x9c\x1a\xd1\x30\x24\x26\x9c\x8b\x29\x40\xd4\x8a\xa8\x8a\xea\x81\x20\x63\xb7\x09\xfe\x87\x36\x84\x27\xe3\xce\x05\x74\x40\x50\xcb\xed\x02\x06\x85\x68\x17\x5f\xa3\xe2\x3b\x87\x46\xff\xf7\xf0\xf5\x88\x8a\x78\xf8\xc3\x9c\xc7\x15\xe7\x0d\x56\xd1\x06\x3e\x78\x12\x1a\x84\x94\x45\xa1\x96\xb2\x28\x04\x1b\xe5\x83\x36\xae\x7e\x30\xa1\x5d\x7c\x55\x51\x6b\x03\x11\x22\xa7\x1e\xa3\x33\xc2\x18\xd2\x1f\xae\x44\xba\x93\x28\x8a\x4d\x8b\xc4\x9d\x2b\x2c\xcb\x80\x45\x59\x0a\xb1\x44\xc2\x53\xe8\x3e\x40\x90\x89\x0c\x90\xa0\xbe\xe4\xfb\x4e\xe7\x1e\x43\xaf\x92\x8c\x3d\xcf\x03\xed\x81\x04\x74\x07\x19\x1b\xb4\xd1\x57\x7e\x57\xe8\xb1\xa6\xaf\xfd\xda\x33\xa4\xc8\x94\x7e\x64\x2a\xff\xaa\xe2\x06\x2c\xd0\x08\x87\xc4\x26\x52\x81\x13\x48\x70\x1d\x69\x21\xb4\x4d\x65\x51\x5b\xe3\x73\xed\x6b\x64\x17\x32\x76\x36\x43\xb1\x7d\x9d\x77\x68\xab\xa0\xbc\x46\xa7\x1d\xb3\x04\xfa\x25\xe9\x30\x53\x8a\x27\x79\xbf\x66\x17\x65\x22\xc1\xcc\x27\x49\x0e\x7a\x21\x95\x31\x2d\x05\x3a\x9d\x3f\x29\x0a\x59\xff\xbe\xe5\x5b\x9e\x0d\x92\xa3\x37\xcb\x3a\x98\x22\xef\xe4\xad\x06\xf4\x65\xb5\x76\xe3\xcd\x2a\x3a\xae\x55\xc0\xf5\x2b\xe9\xd0\xda\x74\xa1\xb4\xd3\x8b\xf5\x09\x54\xc2\x28\x01\xe3\xfe\xe0\x06\xe9\x35\xb8\x1f\xe1\x34\x65\xd4\xf6\x7e\x68\xc4\x05\xd2\x83\x87\xd9\x87\x91\x63\xa4\x03\x2a\x15\x5c\x71\x30\x05\x6c\xb6\xfc\x74\xa3\xf0\x2b\x68\x81\x93\x80\x80\xf2\xe9\xc2\xc4\x23\xfa\xd7\x3f\xfe\xf3\xb7\xbf\xa3\xc3\x83\xc6\x5b\xe4\xea\xaf\x93\xd7\xe8\x12\x2a\x04\x45\x3d\x2c\xd4\xbf\xff\x99\xa0\xfd\xb2\xc1\xd0\xe3\x0a\x34\xa1\x13\xfd\xda\xa3\x1c\x80\x2f\x6f\x25\xbe\x0c\x19\x4e\x1e\x9c\xce\x0a\x81\xc6\xac\x97\xdb\x34\xb9\x25\x80\x79\x12\x86\xa4\x2c\x01\xdf\xa2\xde\x2f\x03\xa8\xbf\xa0\x9c\x24\xaf\x91\x24\x04\x2d\x9d\xaa\x7b\xdf\x31\x55\x51\x36\xb4\xbf\x09\xc4\xa0\x1b\x4d\x4e\x0e\xfd\x58\x1b\xc7\x1f\x32\x3e\x84\x21\x4a\x2a\x22\xfc\xab\x5f\xce\xbb\x9f\xfa\x5d\x2f\x0e\xd7\xf5\xcb\xdf\xd9\x56\x27\xed\xac\x6a\xa5\x8d\x1a\xc2\x24\x41\x99\xf4\xb4\x7b\x95\xa0\x10\x1e\xe4\xf4\x39\xba\x6c\x36\xca\x6e\x9e\x35\x6c\xff\xa1\x08\x1a\xc1\x24\xf8\xfc\xa4\x58\xe9\x61\xb6\xa4\xc7\xb9\x4e\x9d\xcd\xc9\xb1\xa2\x5b\x6d\xb9\x52\x67\x4c\x99\x19\x74\x7b\x37\x57\x67\x83\xae\xfd\x45\xa4\x18\xaf\xea\xe0\x47\xf4\xfc\xb0\x34\xec\xcd\xdd\xea\x07\x18\x57\x91\x38\x65\x50\x06\xe1\x9e\x05\x2e\x55\xf9\x4d\x83\x07\x03\x96\xdf\xbe\xe5\xd2\xbe\x40\x05\xe4\xe2\xe9\x69\xa5\xd5\x2d\x31\xdb\x3a\xd7\xad\xe8\x93\x2c\x06\xea\x3a\x7e\x84\xeb\x48\x57\x91\xeb\x82\xfc\xf4\x04\x80\x10\xee\x62\x69\xd4\x59\xf4\xef\x59\xcf\x64\x89\x0d\xc2\x7d\x9f\xe9\xb8\xce\x94\x02\xb8\xd5\x59\x2c\xaa\x15\x26\x5b\xea\x5c\xb6\x58\xa1\x90\x2e\x21\x33\x03\x80\x2b\x68\xbb\x8b\xee\x02\xe2\x03\xbc\xb0\x38\x45\x09\x4f\x88\xe9\x1d\x40\x17\xce\x34\x18\xb5\x9d\x37\x75\x2c\xc8\x19\x60\x82\x0a\xa1\x0c\x9d\xa2\x83\x74\x8e\x1a\x47\xf5\x0f\xcd\x1e\x35\x3b\x17\x56\x0b\x28\x9f\x4d\xbb\x61\xd1\x2f\xd7\x81\xe1\x21\x34\x78\xe6\xd3\x4d\x05\x85\x7c\x59\x94\x33\x51\x09\x82\x86\xb3\x0a\xbf\x54\x94\x93\x1c\x3c\xc2\x64\x0f\x78\xc5\x4c\x6b\xd5\x69\x69\x2f\x80\xb1\x8a\x1b\x3f\x69\x4b\x99\x3d\xa8\x03\xa2\x06\xed\xbb\xf4\x58\x8f\x32\xd0\xc8\x74\x7c\xe4\x8f\xa9\x64\x65\xfc\x2e\x9d\x8a\x34\xee\x40\x9b\xfb\x87\x94\x00\xcc\xde\xa6\x40\xd5\x40\xe8\xd8\x2a\xba\xa5\x6a\x78\xb7\x5d\x92\x9e\xe2\xf5\xaf\xd2\xff\x0d\x00\x00\xff\xff\x3b\xa4\x9f\x34\xac\x16\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 5804, mode: os.FileMode(420), modTime: time.Unix(1485128249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x69\x6f\xe3\x36\x13\xfe\xee\x5f\xc1\xd5\x06\x2b\x2a\xb6\x65\xef\x8b\x7c\x79\x95\xab\x6d\x9a\x22\x28\x36\x5b\x74\x93\xa2\x68\x23\x27\xa0\x25\xda\x56\x23\x91\x2e\x49\x75\xd7\x8d\xfd\xdf\x3b\xa3\xc3\x92\x18\x27\x8e\x00\x1f\x1a\x3e\xf3\x70\x38\x17\x67\x96\x8b\xc8\x24\x52\x90\x2f\xfc\xef\x9c\x6b\xf3\x49\xce\xe7\x5c\x51\x8f\x3c\xf5\x08\x3c\xa3\x51\x24\xb3\x65\x92\x72\x62\x16\xf0\xe1\xd9\x32\x65\x86\x17\x4b\xff\x30\x45\xb4\xcc\x55\xc4\xc9\x29\x39\xa0\xce\x7b\x55\x32\x0c\xb9\x30\x6a\xe5\x78\xfe\xc2\x64\x29\xf5\x8e\xb7\xe0\x5a\x1b\xe0\x57\x4c\xc4\x29\x9f\x32\xa5\xfd\x8a\x9f\x96\x54\x00\x2f\xf0\x66\x91\x68\x5f\xe4\x19\x60\xc7\xc7\x8d\xc4\xac\x96\xa8\xee\x64\x2c\x4a\x84\x91\x7a\xe1\xb4\x16\x23\x99\x4a\x85\xab\x8a\xc7\x4e\xc5\xb3\x3d\xde\x9c\x9b\x0b\x5c\xff\x61\x75\x63\x98\xc9\x35\xd5\xc5\xcf\x85\x8c\x79\x7d\x56\x7c\x92\x19\x69\xad\x90\xd3\x53\xf2\xbf\xf1\x98\xac\xd7\xc4\x16\x7e\x6c\x6b\xe1\xa3\xb8\xc9\x95\x20\x8e\xce\xa3\x88\x6b\x5d\x19\x86\xcf\x86\xf0\x54\xf3\x1d\xd4\x47\xe3\xa3\x97\x58\x62\x26\x20\x0c\xcf\x49\x76\xa3\xbf\x32\x25\x12\x31\x6f\xc3\x7b\xe5\x77\xd7\x09\xf9\x32\x06\xff\xdf\x26\x06\xfc\xdd\xde\xf9\x80\xc6\x32\xca\x33\x08\x9c\xe7\x33\x63\x14\x75\x0c\x62\x9c\x01\x71\x3e\x5f\xfe\x4e\xbe\x5c\xfe\xfa\xdb\xe5\xcd\xed\xbb\x77\x8e\xd7\xec\xa0\xb9\xb9\x4d\x32\x2e\x73\x43\xb7\xfc\x48\xfa\x1a\xd9\xf5\xb5\x8c\x1e\xc9\x85\x14\x5a\x82\xc0\x3b\x26\x9b\x01\xfa\x77\x5c\xd1\xda\xe6\xea\x95\x30\xec\xdb\x55\x32\x5f\xa4\xf0\x31\xf4\x2f\x2d\x45\xdb\x6c\x7c\x87\x78\xe3\x8f\xaf\x38\xe4\x56\xc4\xe9\xe8\xc3\x68\x3e\x20\xee\x07\x96\x2d\x8f\x5d\xaf\x11\x9f\x94\xe2\xd4\x74\xa4\x67\xa5\x74\x8e\xd2\xe6\x68\x95\x5b\xbb\xbc\xd4\xa1\x61\x98\xdf\xb1\xe1\xbf\xdf\x0f\xff\x1c\x0f\xff\x3f\x79\x3a\xda\xac\xc3\xf0\xee\x3e\x9f\xac\xef\xee\xc3\xd0\x99\x78\x87\x00\xd1\x87\x81\x77\xbe\x0e\xa7\xd4\xa8\x9c\xaf\x67\x0c\x82\xb6\x16\x79\x9a\x7a\xe1\x74\x3d\x3c\x0f\xe3\x3e\x3d\x0f\x42\x3f\x8c\x0f\xbd\x73\xf8\x77\xc7\x2f\x27\x77\xfd\x70\x38\xc1\x15\xef\xdc\x43\x73\x1a\x6f\x66\xcc\x44\x0b\x3b\x43\xb0\x92\xa2\x54\xc3\xb9\x5d\xa8\x8f\x29\x57\xee\x71\x67\x1d\xd3\x6c\x74\xef\x8c\x7c\x03\xb5\x58\x51\xd8\x1c\x5b\x5c\x70\xb0\x17\x87\x4f\xb5\xdf\x23\x5f\x59\x9b\xbd\x98\x99\x96\xa6\x36\x0a\xf2\x73\x97\x72\x6f\x07\x55\x61\x5a\xe3\xbf\xbd\x26\x56\x9b\x4c\x25\x64\x15\x13\xd6\x2e\x6d\x4e\x0c\xc4\x5b\xd9\x10\x6b\x53\xed\x2a\x3e\xf7\x44\x2f\x99\x00\x2d\xa6\xf5\xa9\xe3\x92\x7e\x41\xd0\x27\xae\x73\x86\x2f\xc5\x3e\xf8\x7a\x32\x42\xdc\x59\x8b\x72\xf3\x42\xda\x63\xab\xca\x95\x82\x02\xc2\x02\xeb\x14\x6a\x11\xfc\x72\x2d\x2e\x3b\xa9\xe0\x5f\xc9\x8f\xf0\x97\xb6\xf2\x17\x51\xb8\x6c\x40\x1d\x20\x2d\x05\x1f\xb8\x4b\x34\x98\xe4\x8c\x1c\xd2\xef\x1c\x89\x5a\xd0\x6b\x29\xcc\xa2\xc0\x7e\xdc\xad\x60\xe1\x7f\x02\x9f\xfd\xc1\x99\x2a\xe9\xc9\x77\x64\x0f\xfe\x0a\x7a\xbe\x2e\xc1\xc1\x1e\xe8\x75\x22\x72\x08\xdc\xdb\xc0\x37\x3c\x92\x22\xd6\xf4\x79\x4d\xd7\x6e\xd9\xed\xf9\xb2\x3f\x7e\x62\xda\x54\xb7\x61\xe5\xab\x76\xa7\x74\xdf\x43\xa4\xcd\x43\x09\x8d\xa1\x99\x18\xfe\xcd\x50\x3b\x66\xaf\x84\x16\x7c\x8a\x1a\x50\xbc\x03\x34\x87\xd9\xf1\x2d\xef\x08\x88\x1b\x2e\x42\xff\xd1\x4b\xe8\x97\xdc\x6f\xae\x8e\x6e\xa0\x33\x6e\x16\x32\x6e\xe0\x85\xdd\x7e\x29\xed\x22\x97\xcc\x2c\x6c\x1c\xca\xba\xa8\x6a\x05\x80\x76\xfb\xfd\xf9\xe6\x97\xcf\x7e\x59\xc9\xc9\x6c\x45\xdb\x3c\x03\x92\x8b\x98\xcf\x12\xc1\xe3\x01\x39\xf2\x3c\x9b\xb2\x3c\xc3\x9b\x39\x4b\xf8\xeb\xa4\xa9\x9c\xbf\x9d\x2f\x4f\xf7\x98\x58\xcf\x0e\x2f\x8c\x09\x5e\xcf\x4e\xa4\xa7\xda\x51\x0f\x10\xc8\x80\x14\xd1\xac\x24\x01\xd9\x7a\xa5\x3e\x4a\x40\x9a\x43\x29\xb0\x3c\x40\xf3\xb7\x0a\x0f\x98\x4a\xc1\xb3\xba\x6f\xd6\x23\x88\x7a\x50\x25\x46\x23\x2d\x63\x1c\x54\x19\xd0\xc8\x31\xa6\x41\x11\xed\x36\x03\x1c\x2a\xa8\x8e\xb9\xe9\x24\x67\x31\x3b\x81\x39\x97\x38\xb6\x81\x0b\x9a\xfb\xc7\xce\xce\x7a\x28\xeb\xf7\x6d\xe7\x15\x29\x5d\xbb\xaf\xcc\xef\x1a\x5c\x25\x79\x57\x03\x47\x43\x80\xd7\x13\x21\xad\x18\x5a\xa8\xf6\x40\x69\xd8\x14\x07\xd0\xa9\x8c\x71\xac\x5c\xc2\x95\xcc\x45\x4c\x91\xa3\xa5\xd0\x99\x6d\x6c\xf1\xb3\x92\xae\xc6\x43\xf0\x04\x78\xa1\x3d\xb1\x28\xce\xe2\x55\x77\xa2\xe9\xd5\xf6\x4c\x8d\xb8\x80\x1b\x46\xc1\x8c\x0c\x76\x44\x69\x12\x3d\xee\x40\xbe\x6e\x3d\x9c\xd8\xac\x6a\x03\x37\xb5\x1d\xd8\x56\x6a\x3c\xba\x0b\xda\x8a\x14\xd4\x2d\xb6\x70\x61\x42\xa9\x38\x94\xdb\x1e\x0f\xec\xc6\x91\xc4\xc5\x20\x8e\x8e\xf7\x7c\x64\x81\xc9\x8b\x29\x08\x89\x63\xf9\x15\xba\x27\x80\xa1\x73\xc1\xac\xdf\x78\xab\x30\xa6\x87\xdf\xff\x05\x00\x00\xff\xff\xb7\xb0\x93\x44\x14\x0c\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3092, mode: os.FileMode(420), modTime: time.Unix(1485127691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/script.js": tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

